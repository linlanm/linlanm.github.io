{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Arch-install.md","hash":"b033ace0c3ca3dff2496c9afcc69a443958f3e1a","modified":1695721541752},{"_id":"source/_posts/Manjaro-settings.md","hash":"ef15583eeed5579e152ddc44021c7112fb6c7992","modified":1695722318590},{"_id":"source/_posts/debian-extra.md","hash":"04c5febdac23ed30ac92455641f03eac58d68d3b","modified":1695721822130},{"_id":"source/_posts/active-office.md","hash":"8931923c18174ec6b63c8f68dad956e7a4185223","modified":1695721436030},{"_id":"source/_posts/nginx-settings.md","hash":"b76edd0e51fa54320df55b28c17d22fec626920e","modified":1695722263893},{"_id":"source/_posts/.DS_Store","hash":"e71b24c08fd127e75e2a75d8aee78a721ac825ff","modified":1695721598768},{"_id":"source/_posts/owncloud-extra.md","hash":"8253e83e1d8233238225b173143316a552bf96b6","modified":1695721669939},{"_id":"source/.DS_Store","hash":"949990e08d268b8326d29e1e3196462374a5d0f2","modified":1695721239529},{"_id":"source/_posts/setting-https.md","hash":"c03155344855ebc0529e5e2ab60085362290c8ca","modified":1695721583908},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1695572924459},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1695572924427},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1695572924427},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1695572924429},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1695572924429},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1695572924442},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1695572924427},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1695572924429},{"_id":"themes/fluid/README.md","hash":"088496f29af0e946055ebd781fa312685335139c","modified":1695572924429},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1695572924430},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1695572924430},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1695572924430},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1695572924430},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1695572924430},{"_id":"themes/fluid/_config.yml","hash":"24b7eedf8fe2740f3d4d503f89f5c1fef36ece2c","modified":1695573302178},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1695572924430},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1695572924430},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1695572924430},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1695572924430},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1695572924431},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1695572924440},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1695572924440},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1695572924440},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1695572924440},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1695572924440},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1695572924441},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1695572924442},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1695572924441},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1695572924441},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1695572924441},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1695572924441},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1695572924428},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1695572924427},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1695572924428},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1695572924428},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1695572924428},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1695572924428},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1695572924444},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1695572924445},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1695572924442},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1695572924445},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1695572924445},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1695572924446},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1695572924446},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1695572924446},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1695572924445},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1695572924446},{"_id":"themes/fluid/.github/workflows/cr.yaml","hash":"19a8a00f5ba9607d82265572fe1202b64a8b0822","modified":1695572924428},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1695572924428},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1695572924428},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1695572924446},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1695572924447},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1695572924447},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1695572924447},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1695572924447},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1695572924448},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1695572924448},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1695572924448},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1695572924449},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1695572924448},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1695572924449},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1695572924449},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1695572924449},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1695572924449},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1695572924450},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1695572924450},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1695572924450},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695572924465},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695572924465},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695572924466},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695572924465},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695572924465},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695572924466},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695572924466},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695572924466},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695572924467},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1695572924461},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1695572924461},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1695572924461},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695572924462},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695572924461},{"_id":"themes/fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695572924464},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695572924464},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695572924464},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1695572924435},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1695572924434},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1695572924435},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1695572924436},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1695572924439},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1695572924439},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1695572924443},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"c19ac8050b82c3676b0332a56099ccfcc36d9d52","modified":1695572924443},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1695572924433},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1695572924443},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1695572924443},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1695572924443},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1695572924434},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1695572924444},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1695572924444},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1695572924460},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1695572924451},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1695572924451},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1695572924460},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1695572924431},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1695572924432},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1695572924432},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1695572924432},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1695572924432},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1695572924432},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1695572924433},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1695572924433},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1695572924433},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1695572924433},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1695572924434},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1695572924434},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"37d750428772d7c71ba36ce0c2540780d90fadea","modified":1695572924435},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1695572924435},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1695572924436},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1695572924436},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1695572924436},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1695572924437},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1695572924437},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1695572924436},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1695572924437},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1695572924437},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1695572924437},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1695572924437},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1695572924438},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1695572924438},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1695572924438},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1695572924439},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"ce6e9f578f4faa45840abddf8f46af3f4b69c177","modified":1695572924438},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1695572924439},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1695572924439},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1695572924451},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1695572924452},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1695572924456},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1695572924456},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1695572924457},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1695572924457},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1695572924457},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1695572924457},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1695572924458},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1695572924458},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1695572924459},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1695572924458},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1695572924459},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1695572924456},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1695572924456},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1695572924456},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1695572924459},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1695572924460},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1695572924452},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1695572924452},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1695572924453},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1695572924453},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1695572924453},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1695572924453},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1695572924454},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1695572924453},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1695572924454},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1695572924454},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1695572924455},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1695572924455},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1695572924455},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1695572924454},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1695572924455},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1695572924455},{"_id":"themes/fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695572924463},{"_id":"public/local-search.xml","hash":"44da397d80813f782ed22e0d799434ca8ff552bc","modified":1695722336761},{"_id":"public/archives/index.html","hash":"111c174974e8d71f6015446e2de663853cc830f5","modified":1695722336761},{"_id":"public/archives/2023/index.html","hash":"9124ff6cd9bf76463116255ba8a559a541f48265","modified":1695722336761},{"_id":"public/archives/2023/09/index.html","hash":"4f2c0d47439f9e1a03b11b30dd0a738316d3126c","modified":1695722336761},{"_id":"public/404.html","hash":"f402fa108f273152551bab4cf2babf09e0d8e2b1","modified":1695722336761},{"_id":"public/tags/index.html","hash":"0c0d8dcbbb2d6b5e8dd10e25a2405250c4f5263f","modified":1695722336761},{"_id":"public/categories/index.html","hash":"8227ed88532cd90b0be75268fa0e0302225b9785","modified":1695722336761},{"_id":"public/links/index.html","hash":"03e6545ef897d619e72f5087b175f1544eb71f36","modified":1695722336761},{"_id":"public/2023/09/26/Manjaro-settings/index.html","hash":"f63c991209f1d4b729374a62e58c93bfc76401b9","modified":1695722336761},{"_id":"public/2023/09/26/nginx-settings/index.html","hash":"f90951f4df10b746ea79651bfb12ae24cd1d11f2","modified":1695722336761},{"_id":"public/2023/09/26/debian-extra/index.html","hash":"6ec55340e8c0f81704639f4eb4b48ce250fd91ac","modified":1695722336761},{"_id":"public/2023/09/26/Arch-install/index.html","hash":"58ce99d51c2c6ca1a69df23fa3670c507d5e8649","modified":1695722336761},{"_id":"public/2023/09/26/owncloud-extra/index.html","hash":"eb4c8604d1f18d3ecff0c20a88acf4fc16e2d752","modified":1695722336761},{"_id":"public/2023/09/26/active-office/index.html","hash":"cb006616607217945f1e8fec77360af721b36993","modified":1695722336761},{"_id":"public/2023/09/26/setting-https/index.html","hash":"b7f4d952f90dfc903b06c8be6bf3c6f10dd5c7a0","modified":1695722336761},{"_id":"public/index.html","hash":"4c98f349ffc9496c4cf3ec8a8441a00875b5a081","modified":1695722336761},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695722336761},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695722336761},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695722336761},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695722336761},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695722336761},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695722336761},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695722336761},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695722336761},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695722336761},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695722336761},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695722336761},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1695722336761},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1695722336761},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695722336761},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695722336761},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695722336761},{"_id":"public/css/main.css","hash":"526a4522eb54bb51772f51fb98295dc4fe03429f","modified":1695722336761},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695722336761}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"ArchLinux安装教程","date":"2023-09-26T09:45:01.000Z","_content":"**一、准备工作**\n\n1.下载arch最新安装镜像;\n\n2.烧录镜像至U盘（4G或8G）\n\nLinux:\n\n`$ sudo dd bs=4M if=archlinux-2020.01.01-x86_64.iso of=/dev/sdc` \n\nWindows:  \n使用rufus,模式选择dd\n\n**二、启动到live环境**\n\n**1.进入装机环境**\n\n**2.验证启动模式**  \n`# ls /sys/firmware/efi/efivars`  \n如果目录不为空，说明当前系统是以UEFI模式启动的，如果目录不存在，系统可能以 BIOS或 CSM 模式启动\n\n**3.连接到互联网**  \na.启动dhcp服务  \n`# systemctl start dhcpcd`  \nb.查看网络连接  \n`# ip a`  \nc.检查网络连通性  \n`# ping -c 3 www.baidu.com`\n\n**4.更新系统时间**  \n`# timedatectl set-ntp true`\n\n**5.硬盘分区**\n\n**查看硬盘信息**  \n`# lsblk`\n\n**分区示例**(磁盘以sda为例)\n\nBIOS和MBR\n\n| 挂载点 | 分区 | 分区类型 | 建议大小 |\n| --- | --- | --- | --- |\n| /mnt | /dev/sda1 | Linux | 剩余空间 |\n| \\[SWAP\\] | /dev/sda2 | Linux swap (交换空间) | 大于 512 MiB |\n\nUEFI with GPT\n\n| 挂载点 | 分区 | 分区类型 | 建议大小 |\n| --- | --- | --- | --- |\n| /mnt/boot/efi  | /dev/sda1 | EFI 系统分区 | 260–512 MiB |\n| /mnt | /dev/sda2 | Linux x86-64 根目录 (/) | 剩余空间 |\n| \\[SWAP\\] | /dev/sda3 | Linux swap (交换空间) | 大于 512 MiB |\n\n*   请使用 cfdisk 或 parted 修改分区表，例如 `# cfdisk /dev/sda`\n*   如果文件系统支持，交换空间也可以设在交换文件上。\n\n**6.格式化分区**(磁盘以sda为例)  \n当分区建立好了，这些分区都需要使用适当的文件系统进行格式化。举例,如果根分区在 /dev/sda2 上并且会使用 *ext4* 文件系统，efi分区在/dev/sda1上，运行：  \n`# mkfs.fat -F32 /dev/sda1` efi分区  \n`# mkfs.*ext4* /dev/sda2` /分区  \n如果您创建了交换分区（例如 /dev/sda3），使用 mkswap 将其初始化：  \n`# mkswap /dev/sda3`  \n`# swapon /dev/sda3`\n\n**7.挂载分区**(磁盘以sda为例)  \n将根分区挂载到 `/mnt`，例如：  \n`# mount /dev/sda2 /mnt`  \n创建其他剩余的挂载点（比如 `/mnt/boot/efi`）并挂载其相应的分区。  \n`# mkdir /mnt/boot/efi -p   # mount /dev/sda1 /mnt/boot/efi`  \n接下来 genfstab 将会自动检测挂载的文件系统和交换空间。\n\n**三、安装系统**\n\n**1.选择镜像**  \n文件 `/etc/pacman.d/mirrorlist` 定义了软件包会从哪个镜像源下载。在 LiveCD 启动的系统上，所有的镜像都被启用，并且在镜像被制作时，我们已经通过他们的同步情况和速度排序。  \n在列表中越前的镜像在下载软件包时有越高的优先权。你可以相应的修改文件 `/etc/pacman.d/mirrorlist`，并**将地理位置最近的镜像源挪到文件的头部**，同时你也应该考虑一些其他标准。  \n这个文件接下来还会被 *pacstrap* 拷贝到新系统里，所以请确保设置正确。  \n例：  \n`# vim /etc/pacman.d/mirrorlist`  \nServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\n\n**2.安装必须的软件包**  \n`# pacstrap /mnt base base-devel linux linux-firmware vim`\n\n**四、配置系统**\n\n**1.Fstab**  \n用以下命令生成fstab文件 (用 `-U` 或 `-L` 选项设置UUID 或卷标)：  \n`# genfstab -U /mnt >> /mnt/etc/fstab`  \n**强烈建议** 在执行完以上命令后，后检查一下生成的 `/mnt/etc/fstab` 文件是否正确。\n\n**2.Chroot**  \nChange root 到新安装的系统：  \n`# arch-chroot /mnt`\n\n**3.设置时区**  \n`# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime`  \n`# hwclock --systohc --localtime`\n\n**4.本地化**  \n本地化的程序与库若要本地化文本，都依赖 Locale，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：`locale.gen` 与 `locale.conf`。  \n`/etc/locale.gen` 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号（`＃`）即可，建议选择带 `UTF-8` 的项：  \n`# vim /etc/locale.gen`  \nen\\_US.UTF-8 UTF-8  \nzh\\_CN.UTF-8 UTF-8  \nzh\\_TW.UTF-8 UTF-8\n\n接着执行 `locale-gen` 以生成 locale 信息：  \n`# locale-gen`\n\n`/etc/locale.gen` 会生成指定的本地化文件。  \n创建 `locale.conf` 并编辑 `LANG` 这一变量,比如将系统 locale 设置为 `en_US.UTF-8`，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。  \n`# echo LANG=en_US.UTF8 > /etc/locale.conf`  \n**警告:** 不推荐在此设置任何中文 locale，会导致 TTY 乱码。\n\n**5.设置网络**  \na.创建 hostname 文件  \n`# vim /etc/hostname`  \n*myhostname*\n\nb.添加对应的信息到 hosts:  \n`# vim /etc/hosts`  \n127.0.0.1 localhost  \n::1 localhost  \n127.0.1.1 *myhostname*.localdomain *myhostname*\n\n**6.用户配置**  \na.修改root密码  \n`# passwd root`  \nb.创建新用户(merlin是新建的用户名)  \n`# useradd -m -G wheel merlin`  \nc.修改用户密码  \n`# passwd merlin`  \nd.修改sudo权限  \n`# visudo`  \n去掉`# %wheel ALL=(ALL) ALL` 前面的注释\n\n**7.其它配置**  \na.*有线连接*  \n`# systemctl enable dhcpcd`   开机自动启动dhcp服务  \n如果上述命令执行提示错误，执行`# pacman -S dhcpcd`  \nb***.***无线连接  \n`# pacman -S iw wpa_supplicant dialog`\n\n**8.按照系统引导**(sda修改为实际安装磁盘)\n\n***BIOS+BMR分区方案引导系统启动***  \n`# pacman -S grub   # grub-install --target=i386-pc /dev/sda   # grub-mkconfig -o /boot/grub/grub.cfg`\n\n**UEFI+*GPT分区方案引导系统启动***  \n`# pacman -S grub efibootmgr   # grub-install --target=x86_64-efi /dev/sda    # grub-mkconfig -o /boot/grub/grub.cfg`\n\n**五、重启**\n\n输入 `exit` 或按 `Ctrl+d` 退出 chroot 环境。  \n可选用 `umount -R /mnt` 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 [fuser(1)](https://jlk.fjfi.cvut.cz/arch/manpages/man/fuser.1) 查找原因。  \n最后，通过执行 `reboot` 重启系统，*systemd* 将自动卸载仍然挂载的任何分区。不要忘记移除安装介质，然后使用 root 帐户登录到新系统。\n\n**注意**：本文章基于Arch Wiki修改，[原文链接](https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))","source":"_posts/Arch-install.md","raw":"---\ntitle: ArchLinux安装教程\ndate: 2023-09-26 17:45:01\ntags:\n---\n**一、准备工作**\n\n1.下载arch最新安装镜像;\n\n2.烧录镜像至U盘（4G或8G）\n\nLinux:\n\n`$ sudo dd bs=4M if=archlinux-2020.01.01-x86_64.iso of=/dev/sdc` \n\nWindows:  \n使用rufus,模式选择dd\n\n**二、启动到live环境**\n\n**1.进入装机环境**\n\n**2.验证启动模式**  \n`# ls /sys/firmware/efi/efivars`  \n如果目录不为空，说明当前系统是以UEFI模式启动的，如果目录不存在，系统可能以 BIOS或 CSM 模式启动\n\n**3.连接到互联网**  \na.启动dhcp服务  \n`# systemctl start dhcpcd`  \nb.查看网络连接  \n`# ip a`  \nc.检查网络连通性  \n`# ping -c 3 www.baidu.com`\n\n**4.更新系统时间**  \n`# timedatectl set-ntp true`\n\n**5.硬盘分区**\n\n**查看硬盘信息**  \n`# lsblk`\n\n**分区示例**(磁盘以sda为例)\n\nBIOS和MBR\n\n| 挂载点 | 分区 | 分区类型 | 建议大小 |\n| --- | --- | --- | --- |\n| /mnt | /dev/sda1 | Linux | 剩余空间 |\n| \\[SWAP\\] | /dev/sda2 | Linux swap (交换空间) | 大于 512 MiB |\n\nUEFI with GPT\n\n| 挂载点 | 分区 | 分区类型 | 建议大小 |\n| --- | --- | --- | --- |\n| /mnt/boot/efi  | /dev/sda1 | EFI 系统分区 | 260–512 MiB |\n| /mnt | /dev/sda2 | Linux x86-64 根目录 (/) | 剩余空间 |\n| \\[SWAP\\] | /dev/sda3 | Linux swap (交换空间) | 大于 512 MiB |\n\n*   请使用 cfdisk 或 parted 修改分区表，例如 `# cfdisk /dev/sda`\n*   如果文件系统支持，交换空间也可以设在交换文件上。\n\n**6.格式化分区**(磁盘以sda为例)  \n当分区建立好了，这些分区都需要使用适当的文件系统进行格式化。举例,如果根分区在 /dev/sda2 上并且会使用 *ext4* 文件系统，efi分区在/dev/sda1上，运行：  \n`# mkfs.fat -F32 /dev/sda1` efi分区  \n`# mkfs.*ext4* /dev/sda2` /分区  \n如果您创建了交换分区（例如 /dev/sda3），使用 mkswap 将其初始化：  \n`# mkswap /dev/sda3`  \n`# swapon /dev/sda3`\n\n**7.挂载分区**(磁盘以sda为例)  \n将根分区挂载到 `/mnt`，例如：  \n`# mount /dev/sda2 /mnt`  \n创建其他剩余的挂载点（比如 `/mnt/boot/efi`）并挂载其相应的分区。  \n`# mkdir /mnt/boot/efi -p   # mount /dev/sda1 /mnt/boot/efi`  \n接下来 genfstab 将会自动检测挂载的文件系统和交换空间。\n\n**三、安装系统**\n\n**1.选择镜像**  \n文件 `/etc/pacman.d/mirrorlist` 定义了软件包会从哪个镜像源下载。在 LiveCD 启动的系统上，所有的镜像都被启用，并且在镜像被制作时，我们已经通过他们的同步情况和速度排序。  \n在列表中越前的镜像在下载软件包时有越高的优先权。你可以相应的修改文件 `/etc/pacman.d/mirrorlist`，并**将地理位置最近的镜像源挪到文件的头部**，同时你也应该考虑一些其他标准。  \n这个文件接下来还会被 *pacstrap* 拷贝到新系统里，所以请确保设置正确。  \n例：  \n`# vim /etc/pacman.d/mirrorlist`  \nServer = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\n\n**2.安装必须的软件包**  \n`# pacstrap /mnt base base-devel linux linux-firmware vim`\n\n**四、配置系统**\n\n**1.Fstab**  \n用以下命令生成fstab文件 (用 `-U` 或 `-L` 选项设置UUID 或卷标)：  \n`# genfstab -U /mnt >> /mnt/etc/fstab`  \n**强烈建议** 在执行完以上命令后，后检查一下生成的 `/mnt/etc/fstab` 文件是否正确。\n\n**2.Chroot**  \nChange root 到新安装的系统：  \n`# arch-chroot /mnt`\n\n**3.设置时区**  \n`# ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime`  \n`# hwclock --systohc --localtime`\n\n**4.本地化**  \n本地化的程序与库若要本地化文本，都依赖 Locale，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：`locale.gen` 与 `locale.conf`。  \n`/etc/locale.gen` 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号（`＃`）即可，建议选择带 `UTF-8` 的项：  \n`# vim /etc/locale.gen`  \nen\\_US.UTF-8 UTF-8  \nzh\\_CN.UTF-8 UTF-8  \nzh\\_TW.UTF-8 UTF-8\n\n接着执行 `locale-gen` 以生成 locale 信息：  \n`# locale-gen`\n\n`/etc/locale.gen` 会生成指定的本地化文件。  \n创建 `locale.conf` 并编辑 `LANG` 这一变量,比如将系统 locale 设置为 `en_US.UTF-8`，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。  \n`# echo LANG=en_US.UTF8 > /etc/locale.conf`  \n**警告:** 不推荐在此设置任何中文 locale，会导致 TTY 乱码。\n\n**5.设置网络**  \na.创建 hostname 文件  \n`# vim /etc/hostname`  \n*myhostname*\n\nb.添加对应的信息到 hosts:  \n`# vim /etc/hosts`  \n127.0.0.1 localhost  \n::1 localhost  \n127.0.1.1 *myhostname*.localdomain *myhostname*\n\n**6.用户配置**  \na.修改root密码  \n`# passwd root`  \nb.创建新用户(merlin是新建的用户名)  \n`# useradd -m -G wheel merlin`  \nc.修改用户密码  \n`# passwd merlin`  \nd.修改sudo权限  \n`# visudo`  \n去掉`# %wheel ALL=(ALL) ALL` 前面的注释\n\n**7.其它配置**  \na.*有线连接*  \n`# systemctl enable dhcpcd`   开机自动启动dhcp服务  \n如果上述命令执行提示错误，执行`# pacman -S dhcpcd`  \nb***.***无线连接  \n`# pacman -S iw wpa_supplicant dialog`\n\n**8.按照系统引导**(sda修改为实际安装磁盘)\n\n***BIOS+BMR分区方案引导系统启动***  \n`# pacman -S grub   # grub-install --target=i386-pc /dev/sda   # grub-mkconfig -o /boot/grub/grub.cfg`\n\n**UEFI+*GPT分区方案引导系统启动***  \n`# pacman -S grub efibootmgr   # grub-install --target=x86_64-efi /dev/sda    # grub-mkconfig -o /boot/grub/grub.cfg`\n\n**五、重启**\n\n输入 `exit` 或按 `Ctrl+d` 退出 chroot 环境。  \n可选用 `umount -R /mnt` 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 [fuser(1)](https://jlk.fjfi.cvut.cz/arch/manpages/man/fuser.1) 查找原因。  \n最后，通过执行 `reboot` 重启系统，*systemd* 将自动卸载仍然挂载的任何分区。不要忘记移除安装介质，然后使用 root 帐户登录到新系统。\n\n**注意**：本文章基于Arch Wiki修改，[原文链接](https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87))","slug":"Arch-install","published":1,"updated":"2023-09-26T09:45:41.752Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5d0000bzpbbsad5mn8","content":"<p><strong>一、准备工作</strong></p>\n<p>1.下载arch最新安装镜像;</p>\n<p>2.烧录镜像至U盘（4G或8G）</p>\n<p>Linux:</p>\n<p><code>$ sudo dd bs=4M if=archlinux-2020.01.01-x86_64.iso of=/dev/sdc</code> </p>\n<p>Windows:<br>使用rufus,模式选择dd</p>\n<p><strong>二、启动到live环境</strong></p>\n<p><strong>1.进入装机环境</strong></p>\n<p><strong>2.验证启动模式</strong><br><code># ls /sys/firmware/efi/efivars</code><br>如果目录不为空，说明当前系统是以UEFI模式启动的，如果目录不存在，系统可能以 BIOS或 CSM 模式启动</p>\n<p><strong>3.连接到互联网</strong><br>a.启动dhcp服务<br><code># systemctl start dhcpcd</code><br>b.查看网络连接<br><code># ip a</code><br>c.检查网络连通性<br><code># ping -c 3 www.baidu.com</code></p>\n<p><strong>4.更新系统时间</strong><br><code># timedatectl set-ntp true</code></p>\n<p><strong>5.硬盘分区</strong></p>\n<p><strong>查看硬盘信息</strong><br><code># lsblk</code></p>\n<p><strong>分区示例</strong>(磁盘以sda为例)</p>\n<p>BIOS和MBR</p>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th>分区</th>\n<th>分区类型</th>\n<th>建议大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;mnt</td>\n<td>&#x2F;dev&#x2F;sda1</td>\n<td>Linux</td>\n<td>剩余空间</td>\n</tr>\n<tr>\n<td>[SWAP]</td>\n<td>&#x2F;dev&#x2F;sda2</td>\n<td>Linux swap (交换空间)</td>\n<td>大于 512 MiB</td>\n</tr>\n</tbody></table>\n<p>UEFI with GPT</p>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th>分区</th>\n<th>分区类型</th>\n<th>建议大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;mnt&#x2F;boot&#x2F;efi</td>\n<td>&#x2F;dev&#x2F;sda1</td>\n<td>EFI 系统分区</td>\n<td>260–512 MiB</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td>&#x2F;dev&#x2F;sda2</td>\n<td>Linux x86-64 根目录 (&#x2F;)</td>\n<td>剩余空间</td>\n</tr>\n<tr>\n<td>[SWAP]</td>\n<td>&#x2F;dev&#x2F;sda3</td>\n<td>Linux swap (交换空间)</td>\n<td>大于 512 MiB</td>\n</tr>\n</tbody></table>\n<ul>\n<li>请使用 cfdisk 或 parted 修改分区表，例如 <code># cfdisk /dev/sda</code></li>\n<li>如果文件系统支持，交换空间也可以设在交换文件上。</li>\n</ul>\n<p><strong>6.格式化分区</strong>(磁盘以sda为例)<br>当分区建立好了，这些分区都需要使用适当的文件系统进行格式化。举例,如果根分区在 &#x2F;dev&#x2F;sda2 上并且会使用 <em>ext4</em> 文件系统，efi分区在&#x2F;dev&#x2F;sda1上，运行：<br><code># mkfs.fat -F32 /dev/sda1</code> efi分区<br><code># mkfs.*ext4* /dev/sda2</code> &#x2F;分区<br>如果您创建了交换分区（例如 &#x2F;dev&#x2F;sda3），使用 mkswap 将其初始化：<br><code># mkswap /dev/sda3</code><br><code># swapon /dev/sda3</code></p>\n<p><strong>7.挂载分区</strong>(磁盘以sda为例)<br>将根分区挂载到 <code>/mnt</code>，例如：<br><code># mount /dev/sda2 /mnt</code><br>创建其他剩余的挂载点（比如 <code>/mnt/boot/efi</code>）并挂载其相应的分区。<br><code># mkdir /mnt/boot/efi -p   # mount /dev/sda1 /mnt/boot/efi</code><br>接下来 genfstab 将会自动检测挂载的文件系统和交换空间。</p>\n<p><strong>三、安装系统</strong></p>\n<p><strong>1.选择镜像</strong><br>文件 <code>/etc/pacman.d/mirrorlist</code> 定义了软件包会从哪个镜像源下载。在 LiveCD 启动的系统上，所有的镜像都被启用，并且在镜像被制作时，我们已经通过他们的同步情况和速度排序。<br>在列表中越前的镜像在下载软件包时有越高的优先权。你可以相应的修改文件 <code>/etc/pacman.d/mirrorlist</code>，并<strong>将地理位置最近的镜像源挪到文件的头部</strong>，同时你也应该考虑一些其他标准。<br>这个文件接下来还会被 <em>pacstrap</em> 拷贝到新系统里，所以请确保设置正确。<br>例：<br><code># vim /etc/pacman.d/mirrorlist</code><br>Server &#x3D; <a href=\"https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\">https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</a></p>\n<p><strong>2.安装必须的软件包</strong><br><code># pacstrap /mnt base base-devel linux linux-firmware vim</code></p>\n<p><strong>四、配置系统</strong></p>\n<p><strong>1.Fstab</strong><br>用以下命令生成fstab文件 (用 <code>-U</code> 或 <code>-L</code> 选项设置UUID 或卷标)：<br><code># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code><br><strong>强烈建议</strong> 在执行完以上命令后，后检查一下生成的 <code>/mnt/etc/fstab</code> 文件是否正确。</p>\n<p><strong>2.Chroot</strong><br>Change root 到新安装的系统：<br><code># arch-chroot /mnt</code></p>\n<p><strong>3.设置时区</strong><br><code># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code><br><code># hwclock --systohc --localtime</code></p>\n<p><strong>4.本地化</strong><br>本地化的程序与库若要本地化文本，都依赖 Locale，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：<code>locale.gen</code> 与 <code>locale.conf</code>。<br><code>/etc/locale.gen</code> 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号（<code>＃</code>）即可，建议选择带 <code>UTF-8</code> 的项：<br><code># vim /etc/locale.gen</code><br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>zh_TW.UTF-8 UTF-8</p>\n<p>接着执行 <code>locale-gen</code> 以生成 locale 信息：<br><code># locale-gen</code></p>\n<p><code>/etc/locale.gen</code> 会生成指定的本地化文件。<br>创建 <code>locale.conf</code> 并编辑 <code>LANG</code> 这一变量,比如将系统 locale 设置为 <code>en_US.UTF-8</code>，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。<br><code># echo LANG=en_US.UTF8 &gt; /etc/locale.conf</code><br><strong>警告:</strong> 不推荐在此设置任何中文 locale，会导致 TTY 乱码。</p>\n<p><strong>5.设置网络</strong><br>a.创建 hostname 文件<br><code># vim /etc/hostname</code><br><em>myhostname</em></p>\n<p>b.添加对应的信息到 hosts:<br><code># vim /etc/hosts</code><br>127.0.0.1 localhost<br>::1 localhost<br>127.0.1.1 <em>myhostname</em>.localdomain <em>myhostname</em></p>\n<p><strong>6.用户配置</strong><br>a.修改root密码<br><code># passwd root</code><br>b.创建新用户(merlin是新建的用户名)<br><code># useradd -m -G wheel merlin</code><br>c.修改用户密码<br><code># passwd merlin</code><br>d.修改sudo权限<br><code># visudo</code><br>去掉<code># %wheel ALL=(ALL) ALL</code> 前面的注释</p>\n<p><strong>7.其它配置</strong><br>a.<em>有线连接</em><br><code># systemctl enable dhcpcd</code>   开机自动启动dhcp服务<br>如果上述命令执行提示错误，执行<code># pacman -S dhcpcd</code><br>b***.***无线连接<br><code># pacman -S iw wpa_supplicant dialog</code></p>\n<p><strong>8.按照系统引导</strong>(sda修改为实际安装磁盘)</p>\n<p><em><strong>BIOS+BMR分区方案引导系统启动</strong></em><br><code># pacman -S grub   # grub-install --target=i386-pc /dev/sda   # grub-mkconfig -o /boot/grub/grub.cfg</code></p>\n<p><strong>UEFI+<em>GPT分区方案引导系统启动</em></strong><br><code># pacman -S grub efibootmgr   # grub-install --target=x86_64-efi /dev/sda    # grub-mkconfig -o /boot/grub/grub.cfg</code></p>\n<p><strong>五、重启</strong></p>\n<p>输入 <code>exit</code> 或按 <code>Ctrl+d</code> 退出 chroot 环境。<br>可选用 <code>umount -R /mnt</code> 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 <a href=\"https://jlk.fjfi.cvut.cz/arch/manpages/man/fuser.1\">fuser(1)</a> 查找原因。<br>最后，通过执行 <code>reboot</code> 重启系统，<em>systemd</em> 将自动卸载仍然挂载的任何分区。不要忘记移除安装介质，然后使用 root 帐户登录到新系统。</p>\n<p><strong>注意</strong>：本文章基于Arch Wiki修改，<a href=\"https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">原文链接</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>一、准备工作</strong></p>\n<p>1.下载arch最新安装镜像;</p>\n<p>2.烧录镜像至U盘（4G或8G）</p>\n<p>Linux:</p>\n<p><code>$ sudo dd bs=4M if=archlinux-2020.01.01-x86_64.iso of=/dev/sdc</code> </p>\n<p>Windows:<br>使用rufus,模式选择dd</p>\n<p><strong>二、启动到live环境</strong></p>\n<p><strong>1.进入装机环境</strong></p>\n<p><strong>2.验证启动模式</strong><br><code># ls /sys/firmware/efi/efivars</code><br>如果目录不为空，说明当前系统是以UEFI模式启动的，如果目录不存在，系统可能以 BIOS或 CSM 模式启动</p>\n<p><strong>3.连接到互联网</strong><br>a.启动dhcp服务<br><code># systemctl start dhcpcd</code><br>b.查看网络连接<br><code># ip a</code><br>c.检查网络连通性<br><code># ping -c 3 www.baidu.com</code></p>\n<p><strong>4.更新系统时间</strong><br><code># timedatectl set-ntp true</code></p>\n<p><strong>5.硬盘分区</strong></p>\n<p><strong>查看硬盘信息</strong><br><code># lsblk</code></p>\n<p><strong>分区示例</strong>(磁盘以sda为例)</p>\n<p>BIOS和MBR</p>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th>分区</th>\n<th>分区类型</th>\n<th>建议大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;mnt</td>\n<td>&#x2F;dev&#x2F;sda1</td>\n<td>Linux</td>\n<td>剩余空间</td>\n</tr>\n<tr>\n<td>[SWAP]</td>\n<td>&#x2F;dev&#x2F;sda2</td>\n<td>Linux swap (交换空间)</td>\n<td>大于 512 MiB</td>\n</tr>\n</tbody></table>\n<p>UEFI with GPT</p>\n<table>\n<thead>\n<tr>\n<th>挂载点</th>\n<th>分区</th>\n<th>分区类型</th>\n<th>建议大小</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;mnt&#x2F;boot&#x2F;efi</td>\n<td>&#x2F;dev&#x2F;sda1</td>\n<td>EFI 系统分区</td>\n<td>260–512 MiB</td>\n</tr>\n<tr>\n<td>&#x2F;mnt</td>\n<td>&#x2F;dev&#x2F;sda2</td>\n<td>Linux x86-64 根目录 (&#x2F;)</td>\n<td>剩余空间</td>\n</tr>\n<tr>\n<td>[SWAP]</td>\n<td>&#x2F;dev&#x2F;sda3</td>\n<td>Linux swap (交换空间)</td>\n<td>大于 512 MiB</td>\n</tr>\n</tbody></table>\n<ul>\n<li>请使用 cfdisk 或 parted 修改分区表，例如 <code># cfdisk /dev/sda</code></li>\n<li>如果文件系统支持，交换空间也可以设在交换文件上。</li>\n</ul>\n<p><strong>6.格式化分区</strong>(磁盘以sda为例)<br>当分区建立好了，这些分区都需要使用适当的文件系统进行格式化。举例,如果根分区在 &#x2F;dev&#x2F;sda2 上并且会使用 <em>ext4</em> 文件系统，efi分区在&#x2F;dev&#x2F;sda1上，运行：<br><code># mkfs.fat -F32 /dev/sda1</code> efi分区<br><code># mkfs.*ext4* /dev/sda2</code> &#x2F;分区<br>如果您创建了交换分区（例如 &#x2F;dev&#x2F;sda3），使用 mkswap 将其初始化：<br><code># mkswap /dev/sda3</code><br><code># swapon /dev/sda3</code></p>\n<p><strong>7.挂载分区</strong>(磁盘以sda为例)<br>将根分区挂载到 <code>/mnt</code>，例如：<br><code># mount /dev/sda2 /mnt</code><br>创建其他剩余的挂载点（比如 <code>/mnt/boot/efi</code>）并挂载其相应的分区。<br><code># mkdir /mnt/boot/efi -p   # mount /dev/sda1 /mnt/boot/efi</code><br>接下来 genfstab 将会自动检测挂载的文件系统和交换空间。</p>\n<p><strong>三、安装系统</strong></p>\n<p><strong>1.选择镜像</strong><br>文件 <code>/etc/pacman.d/mirrorlist</code> 定义了软件包会从哪个镜像源下载。在 LiveCD 启动的系统上，所有的镜像都被启用，并且在镜像被制作时，我们已经通过他们的同步情况和速度排序。<br>在列表中越前的镜像在下载软件包时有越高的优先权。你可以相应的修改文件 <code>/etc/pacman.d/mirrorlist</code>，并<strong>将地理位置最近的镜像源挪到文件的头部</strong>，同时你也应该考虑一些其他标准。<br>这个文件接下来还会被 <em>pacstrap</em> 拷贝到新系统里，所以请确保设置正确。<br>例：<br><code># vim /etc/pacman.d/mirrorlist</code><br>Server &#x3D; <a href=\"https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\">https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</a></p>\n<p><strong>2.安装必须的软件包</strong><br><code># pacstrap /mnt base base-devel linux linux-firmware vim</code></p>\n<p><strong>四、配置系统</strong></p>\n<p><strong>1.Fstab</strong><br>用以下命令生成fstab文件 (用 <code>-U</code> 或 <code>-L</code> 选项设置UUID 或卷标)：<br><code># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code><br><strong>强烈建议</strong> 在执行完以上命令后，后检查一下生成的 <code>/mnt/etc/fstab</code> 文件是否正确。</p>\n<p><strong>2.Chroot</strong><br>Change root 到新安装的系统：<br><code># arch-chroot /mnt</code></p>\n<p><strong>3.设置时区</strong><br><code># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code><br><code># hwclock --systohc --localtime</code></p>\n<p><strong>4.本地化</strong><br>本地化的程序与库若要本地化文本，都依赖 Locale，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：<code>locale.gen</code> 与 <code>locale.conf</code>。<br><code>/etc/locale.gen</code> 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号（<code>＃</code>）即可，建议选择带 <code>UTF-8</code> 的项：<br><code># vim /etc/locale.gen</code><br>en_US.UTF-8 UTF-8<br>zh_CN.UTF-8 UTF-8<br>zh_TW.UTF-8 UTF-8</p>\n<p>接着执行 <code>locale-gen</code> 以生成 locale 信息：<br><code># locale-gen</code></p>\n<p><code>/etc/locale.gen</code> 会生成指定的本地化文件。<br>创建 <code>locale.conf</code> 并编辑 <code>LANG</code> 这一变量,比如将系统 locale 设置为 <code>en_US.UTF-8</code>，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。<br><code># echo LANG=en_US.UTF8 &gt; /etc/locale.conf</code><br><strong>警告:</strong> 不推荐在此设置任何中文 locale，会导致 TTY 乱码。</p>\n<p><strong>5.设置网络</strong><br>a.创建 hostname 文件<br><code># vim /etc/hostname</code><br><em>myhostname</em></p>\n<p>b.添加对应的信息到 hosts:<br><code># vim /etc/hosts</code><br>127.0.0.1 localhost<br>::1 localhost<br>127.0.1.1 <em>myhostname</em>.localdomain <em>myhostname</em></p>\n<p><strong>6.用户配置</strong><br>a.修改root密码<br><code># passwd root</code><br>b.创建新用户(merlin是新建的用户名)<br><code># useradd -m -G wheel merlin</code><br>c.修改用户密码<br><code># passwd merlin</code><br>d.修改sudo权限<br><code># visudo</code><br>去掉<code># %wheel ALL=(ALL) ALL</code> 前面的注释</p>\n<p><strong>7.其它配置</strong><br>a.<em>有线连接</em><br><code># systemctl enable dhcpcd</code>   开机自动启动dhcp服务<br>如果上述命令执行提示错误，执行<code># pacman -S dhcpcd</code><br>b***.***无线连接<br><code># pacman -S iw wpa_supplicant dialog</code></p>\n<p><strong>8.按照系统引导</strong>(sda修改为实际安装磁盘)</p>\n<p><em><strong>BIOS+BMR分区方案引导系统启动</strong></em><br><code># pacman -S grub   # grub-install --target=i386-pc /dev/sda   # grub-mkconfig -o /boot/grub/grub.cfg</code></p>\n<p><strong>UEFI+<em>GPT分区方案引导系统启动</em></strong><br><code># pacman -S grub efibootmgr   # grub-install --target=x86_64-efi /dev/sda    # grub-mkconfig -o /boot/grub/grub.cfg</code></p>\n<p><strong>五、重启</strong></p>\n<p>输入 <code>exit</code> 或按 <code>Ctrl+d</code> 退出 chroot 环境。<br>可选用 <code>umount -R /mnt</code> 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 <a href=\"https://jlk.fjfi.cvut.cz/arch/manpages/man/fuser.1\">fuser(1)</a> 查找原因。<br>最后，通过执行 <code>reboot</code> 重启系统，<em>systemd</em> 将自动卸载仍然挂载的任何分区。不要忘记移除安装介质，然后使用 root 帐户登录到新系统。</p>\n<p><strong>注意</strong>：本文章基于Arch Wiki修改，<a href=\"https://wiki.archlinux.org/index.php/Installation_guide_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)\">原文链接</a></p>\n"},{"title":"Manjaro安装后基本配置","date":"2023-09-26T09:52:50.000Z","_content":"**1.设置官方镜像源**  \n`$ sudo pacman-mirrors -i -c China -m rank`  \n输入以上命令后会有弹出框，选择一个国内镜像(推荐中国科技大学的镜像源https://mirrors.ustc.edu.cn)\n\n**2.升级系统及编辑器**  \n`$ sudo pacman -Syyu && sudo pacman -S vim`\n\n**3.添加archlinuxcn源**  \n`$ sudo vim /etc/pacman.conf`  \n文件底部添加以下几行\n\n\n```\n[archlinuxcn]\nSigLevel = Optional TrustedOnly  \nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n修改文件后，执行以下命令  \n`$ sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring`\n\n**4.安装输入法**(基于 fcitx 的搜狗输入法)  \n`$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin`  \n添加输入法配置文件  \n`$ vim ~/.xprofile`\n\n```export GTK\\_IM\\_MODULE=fcitx\nexport QT\\_IM\\_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n```\n\n重启即可正常使用输入法\n\n5.安装常用软件  \n`$ sudo pacman -S deepin.com.qq.office deepin.com.qq.im netease-cloud-music wps-office ttf-wps-fonts yay google-chrome`  \n`$ yay -S deepin-wine-wechat`\n\ndeepin.com.qq.office \\[QQ\\]  \ndeepin.com.qq.im \\[TIM\\]  \nnetease-cloud-music \\[网易云音乐\\]  \nwps-office \\[WPS\\]  \nttf-wps-fonts \\[WPS字体\\]  \nyay \\[AUR工具\\]  \ngoogle-chrome \\[谷歌浏览器\\]  \ndeepin-wine-wechat \\[微信\\]","source":"_posts/Manjaro-settings.md","raw":"---\ntitle: Manjaro安装后基本配置\ndate: 2023-09-26 17:52:50\ntags:\n---\n**1.设置官方镜像源**  \n`$ sudo pacman-mirrors -i -c China -m rank`  \n输入以上命令后会有弹出框，选择一个国内镜像(推荐中国科技大学的镜像源https://mirrors.ustc.edu.cn)\n\n**2.升级系统及编辑器**  \n`$ sudo pacman -Syyu && sudo pacman -S vim`\n\n**3.添加archlinuxcn源**  \n`$ sudo vim /etc/pacman.conf`  \n文件底部添加以下几行\n\n\n```\n[archlinuxcn]\nSigLevel = Optional TrustedOnly  \nServer = https://mirrors.ustc.edu.cn/archlinuxcn/$arch\n```\n\n修改文件后，执行以下命令  \n`$ sudo pacman -Syy && sudo pacman -S archlinuxcn-keyring`\n\n**4.安装输入法**(基于 fcitx 的搜狗输入法)  \n`$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin`  \n添加输入法配置文件  \n`$ vim ~/.xprofile`\n\n```export GTK\\_IM\\_MODULE=fcitx\nexport QT\\_IM\\_MODULE=fcitx\nexport XMODIFIERS=\"@im=fcitx\"\n```\n\n重启即可正常使用输入法\n\n5.安装常用软件  \n`$ sudo pacman -S deepin.com.qq.office deepin.com.qq.im netease-cloud-music wps-office ttf-wps-fonts yay google-chrome`  \n`$ yay -S deepin-wine-wechat`\n\ndeepin.com.qq.office \\[QQ\\]  \ndeepin.com.qq.im \\[TIM\\]  \nnetease-cloud-music \\[网易云音乐\\]  \nwps-office \\[WPS\\]  \nttf-wps-fonts \\[WPS字体\\]  \nyay \\[AUR工具\\]  \ngoogle-chrome \\[谷歌浏览器\\]  \ndeepin-wine-wechat \\[微信\\]","slug":"Manjaro-settings","published":1,"updated":"2023-09-26T09:58:38.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5i0001bzpbawagcfk2","content":"<p><strong>1.设置官方镜像源</strong><br><code>$ sudo pacman-mirrors -i -c China -m rank</code><br>输入以上命令后会有弹出框，选择一个国内镜像(推荐中国科技大学的镜像源<a href=\"https://mirrors.ustc.edu.cn/\">https://mirrors.ustc.edu.cn</a>)</p>\n<p><strong>2.升级系统及编辑器</strong><br><code>$ sudo pacman -Syyu &amp;&amp; sudo pacman -S vim</code></p>\n<p><strong>3.添加archlinuxcn源</strong><br><code>$ sudo vim /etc/pacman.conf</code><br>文件底部添加以下几行</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[archlinuxcn]</span><br><span class=\"hljs-attr\">SigLevel</span> = Optional TrustedOnly  <br><span class=\"hljs-attr\">Server</span> = https://mirrors.ustc.edu.cn/archlinuxcn/<span class=\"hljs-variable\">$arch</span><br></code></pre></td></tr></table></figure>\n\n<p>修改文件后，执行以下命令<br><code>$ sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></p>\n<p><strong>4.安装输入法</strong>(基于 fcitx 的搜狗输入法)<br><code>$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</code><br>添加输入法配置文件<br><code>$ vim ~/.xprofile</code></p>\n<figure class=\"highlight plaintext\"><figcaption><span>GTK\\_IM\\_MODULE</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs export\">export QT\\_IM\\_MODULE=fcitx<br>export XMODIFIERS=&quot;@im=fcitx&quot;<br></code></pre></td></tr></table></figure>\n\n<p>重启即可正常使用输入法</p>\n<p>5.安装常用软件<br><code>$ sudo pacman -S deepin.com.qq.office deepin.com.qq.im netease-cloud-music wps-office ttf-wps-fonts yay google-chrome</code><br><code>$ yay -S deepin-wine-wechat</code></p>\n<p>deepin.com.qq.office [QQ]<br>deepin.com.qq.im [TIM]<br>netease-cloud-music [网易云音乐]<br>wps-office [WPS]<br>ttf-wps-fonts [WPS字体]<br>yay [AUR工具]<br>google-chrome [谷歌浏览器]<br>deepin-wine-wechat [微信]</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>1.设置官方镜像源</strong><br><code>$ sudo pacman-mirrors -i -c China -m rank</code><br>输入以上命令后会有弹出框，选择一个国内镜像(推荐中国科技大学的镜像源<a href=\"https://mirrors.ustc.edu.cn/\">https://mirrors.ustc.edu.cn</a>)</p>\n<p><strong>2.升级系统及编辑器</strong><br><code>$ sudo pacman -Syyu &amp;&amp; sudo pacman -S vim</code></p>\n<p><strong>3.添加archlinuxcn源</strong><br><code>$ sudo vim /etc/pacman.conf</code><br>文件底部添加以下几行</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-section\">[archlinuxcn]</span><br><span class=\"hljs-attr\">SigLevel</span> = Optional TrustedOnly  <br><span class=\"hljs-attr\">Server</span> = https://mirrors.ustc.edu.cn/archlinuxcn/<span class=\"hljs-variable\">$arch</span><br></code></pre></td></tr></table></figure>\n\n<p>修改文件后，执行以下命令<br><code>$ sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></p>\n<p><strong>4.安装输入法</strong>(基于 fcitx 的搜狗输入法)<br><code>$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</code><br>添加输入法配置文件<br><code>$ vim ~/.xprofile</code></p>\n<figure class=\"highlight plaintext\"><figcaption><span>GTK\\_IM\\_MODULE</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs export\">export QT\\_IM\\_MODULE=fcitx<br>export XMODIFIERS=&quot;@im=fcitx&quot;<br></code></pre></td></tr></table></figure>\n\n<p>重启即可正常使用输入法</p>\n<p>5.安装常用软件<br><code>$ sudo pacman -S deepin.com.qq.office deepin.com.qq.im netease-cloud-music wps-office ttf-wps-fonts yay google-chrome</code><br><code>$ yay -S deepin-wine-wechat</code></p>\n<p>deepin.com.qq.office [QQ]<br>deepin.com.qq.im [TIM]<br>netease-cloud-music [网易云音乐]<br>wps-office [WPS]<br>ttf-wps-fonts [WPS字体]<br>yay [AUR工具]<br>google-chrome [谷歌浏览器]<br>deepin-wine-wechat [微信]</p>\n"},{"title":"KMS命令激活Windows/Office","date":"2023-09-26T09:42:03.000Z","_content":"**注意**：以下所有命令均以管理员权限运行\n\n**Windows激活**\n\n1.安装秘钥  \n`slmgr.vbs -ipk xxxx-xxxx-xxxx-xxxx`\n\n2.设置KMS服务器  \n`slmgr.vbs -skms xxx.xxx.xxx`\n\n3.激活Windows  \n`slmgr.vbs -ato`\n\n4.查看激活信息  \n`slmgr.vbs -xpr`\n\n**Office激活**(VL版本)\n\n**1.CMD切换到Office安装位置**  \n默认安装位置 C:\\\\Program Files\\\\Microsoft Office\\\\Office14  \noffice16是office2016  \noffice15是office2013  \noffice14是office2010  \n`cd \"C:\\Program Files\\Microsoft Office\\Office14\"`\n\n**2.设置KMS服务器**  \n`cscript ospp.vbs /sethst:xxx.xxx.xxx`\n\n**3.安装Office秘钥**  \n`cscript ospp.vbs /inpkey:xxxxx`\n\n**4.激活Office**  \n`cscript ospp.vbs /act`\n\n**可能会用到的ospp.vbs其它命令**\n\n**1.卸载秘钥**(xxxxx为秘钥后5位)  \n`cscript ospp.vbs /unpkey:xxxxx`  \n**2.显示许可证信息**  \n`cscript ospp.vbs /dstatus`","source":"_posts/active-office.md","raw":"---\ntitle: KMS命令激活Windows/Office\ndate: 2023-09-26 17:42:03\ntags:\n---\n**注意**：以下所有命令均以管理员权限运行\n\n**Windows激活**\n\n1.安装秘钥  \n`slmgr.vbs -ipk xxxx-xxxx-xxxx-xxxx`\n\n2.设置KMS服务器  \n`slmgr.vbs -skms xxx.xxx.xxx`\n\n3.激活Windows  \n`slmgr.vbs -ato`\n\n4.查看激活信息  \n`slmgr.vbs -xpr`\n\n**Office激活**(VL版本)\n\n**1.CMD切换到Office安装位置**  \n默认安装位置 C:\\\\Program Files\\\\Microsoft Office\\\\Office14  \noffice16是office2016  \noffice15是office2013  \noffice14是office2010  \n`cd \"C:\\Program Files\\Microsoft Office\\Office14\"`\n\n**2.设置KMS服务器**  \n`cscript ospp.vbs /sethst:xxx.xxx.xxx`\n\n**3.安装Office秘钥**  \n`cscript ospp.vbs /inpkey:xxxxx`\n\n**4.激活Office**  \n`cscript ospp.vbs /act`\n\n**可能会用到的ospp.vbs其它命令**\n\n**1.卸载秘钥**(xxxxx为秘钥后5位)  \n`cscript ospp.vbs /unpkey:xxxxx`  \n**2.显示许可证信息**  \n`cscript ospp.vbs /dstatus`","slug":"active-office","published":1,"updated":"2023-09-26T09:43:56.030Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5j0002bzpbfpmp86gc","content":"<p><strong>注意</strong>：以下所有命令均以管理员权限运行</p>\n<p><strong>Windows激活</strong></p>\n<p>1.安装秘钥<br><code>slmgr.vbs -ipk xxxx-xxxx-xxxx-xxxx</code></p>\n<p>2.设置KMS服务器<br><code>slmgr.vbs -skms xxx.xxx.xxx</code></p>\n<p>3.激活Windows<br><code>slmgr.vbs -ato</code></p>\n<p>4.查看激活信息<br><code>slmgr.vbs -xpr</code></p>\n<p><strong>Office激活</strong>(VL版本)</p>\n<p><strong>1.CMD切换到Office安装位置</strong><br>默认安装位置 C:\\Program Files\\Microsoft Office\\Office14<br>office16是office2016<br>office15是office2013<br>office14是office2010<br><code>cd &quot;C:\\Program Files\\Microsoft Office\\Office14&quot;</code></p>\n<p><strong>2.设置KMS服务器</strong><br><code>cscript ospp.vbs /sethst:xxx.xxx.xxx</code></p>\n<p><strong>3.安装Office秘钥</strong><br><code>cscript ospp.vbs /inpkey:xxxxx</code></p>\n<p><strong>4.激活Office</strong><br><code>cscript ospp.vbs /act</code></p>\n<p><strong>可能会用到的ospp.vbs其它命令</strong></p>\n<p><strong>1.卸载秘钥</strong>(xxxxx为秘钥后5位)<br><code>cscript ospp.vbs /unpkey:xxxxx</code><br><strong>2.显示许可证信息</strong><br><code>cscript ospp.vbs /dstatus</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>注意</strong>：以下所有命令均以管理员权限运行</p>\n<p><strong>Windows激活</strong></p>\n<p>1.安装秘钥<br><code>slmgr.vbs -ipk xxxx-xxxx-xxxx-xxxx</code></p>\n<p>2.设置KMS服务器<br><code>slmgr.vbs -skms xxx.xxx.xxx</code></p>\n<p>3.激活Windows<br><code>slmgr.vbs -ato</code></p>\n<p>4.查看激活信息<br><code>slmgr.vbs -xpr</code></p>\n<p><strong>Office激活</strong>(VL版本)</p>\n<p><strong>1.CMD切换到Office安装位置</strong><br>默认安装位置 C:\\Program Files\\Microsoft Office\\Office14<br>office16是office2016<br>office15是office2013<br>office14是office2010<br><code>cd &quot;C:\\Program Files\\Microsoft Office\\Office14&quot;</code></p>\n<p><strong>2.设置KMS服务器</strong><br><code>cscript ospp.vbs /sethst:xxx.xxx.xxx</code></p>\n<p><strong>3.安装Office秘钥</strong><br><code>cscript ospp.vbs /inpkey:xxxxx</code></p>\n<p><strong>4.激活Office</strong><br><code>cscript ospp.vbs /act</code></p>\n<p><strong>可能会用到的ospp.vbs其它命令</strong></p>\n<p><strong>1.卸载秘钥</strong>(xxxxx为秘钥后5位)<br><code>cscript ospp.vbs /unpkey:xxxxx</code><br><strong>2.显示许可证信息</strong><br><code>cscript ospp.vbs /dstatus</code></p>\n"},{"title":"Debian10缺少iwlwifi固件无法使用无线网络解决办法","date":"2023-09-26T09:49:32.000Z","_content":"**解决过程：**\n\n1.使用有线网络连接到互联网;\n\n2.编辑Debian10的软件源配置文件\n\n`$ sudo vim /etc/apt/sources.list`\n\n将`non-free`添加到源的后面\n\n3.更新源\n\n`$ sudo apt update`\n\n4.安装firmware-iwlwifi包\n\n`$ sudo apt install firmware-iwlwifi`\n\n5.加载模块\n\n`$ sudo modprobe -r iwlwifi`\n\n`$ sudo modprobe iwlwifi`\n\n**说明：**Debian是一个开源操作系统。因此，在安装Debian的时候，默认只安装自由软件，而非自由软件（non-free）则不会被默认安装。","source":"_posts/debian-extra.md","raw":"---\ntitle: Debian10缺少iwlwifi固件无法使用无线网络解决办法\ndate: 2023-09-26 17:49:32\ntags:\n---\n**解决过程：**\n\n1.使用有线网络连接到互联网;\n\n2.编辑Debian10的软件源配置文件\n\n`$ sudo vim /etc/apt/sources.list`\n\n将`non-free`添加到源的后面\n\n3.更新源\n\n`$ sudo apt update`\n\n4.安装firmware-iwlwifi包\n\n`$ sudo apt install firmware-iwlwifi`\n\n5.加载模块\n\n`$ sudo modprobe -r iwlwifi`\n\n`$ sudo modprobe iwlwifi`\n\n**说明：**Debian是一个开源操作系统。因此，在安装Debian的时候，默认只安装自由软件，而非自由软件（non-free）则不会被默认安装。","slug":"debian-extra","published":1,"updated":"2023-09-26T09:50:22.130Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5k0003bzpbfg7lg7s8","content":"<p><strong>解决过程：</strong></p>\n<p>1.使用有线网络连接到互联网;</p>\n<p>2.编辑Debian10的软件源配置文件</p>\n<p><code>$ sudo vim /etc/apt/sources.list</code></p>\n<p>将<code>non-free</code>添加到源的后面</p>\n<p>3.更新源</p>\n<p><code>$ sudo apt update</code></p>\n<p>4.安装firmware-iwlwifi包</p>\n<p><code>$ sudo apt install firmware-iwlwifi</code></p>\n<p>5.加载模块</p>\n<p><code>$ sudo modprobe -r iwlwifi</code></p>\n<p><code>$ sudo modprobe iwlwifi</code></p>\n<p><strong>说明：</strong>Debian是一个开源操作系统。因此，在安装Debian的时候，默认只安装自由软件，而非自由软件（non-free）则不会被默认安装。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>解决过程：</strong></p>\n<p>1.使用有线网络连接到互联网;</p>\n<p>2.编辑Debian10的软件源配置文件</p>\n<p><code>$ sudo vim /etc/apt/sources.list</code></p>\n<p>将<code>non-free</code>添加到源的后面</p>\n<p>3.更新源</p>\n<p><code>$ sudo apt update</code></p>\n<p>4.安装firmware-iwlwifi包</p>\n<p><code>$ sudo apt install firmware-iwlwifi</code></p>\n<p>5.加载模块</p>\n<p><code>$ sudo modprobe -r iwlwifi</code></p>\n<p><code>$ sudo modprobe iwlwifi</code></p>\n<p><strong>说明：</strong>Debian是一个开源操作系统。因此，在安装Debian的时候，默认只安装自由软件，而非自由软件（non-free）则不会被默认安装。</p>\n"},{"title":"nginx反向代理及设置访问站点密码","date":"2023-09-26T09:50:48.000Z","_content":"1.在/etc/nginx/conf.d目录下修改站点配置文件,修改完成后重启服务\n\n```\nserver {\n        listen 80;\n        server_name admin.service.com;\n        location / {\n               proxy_pass http://192.168.1.123:8090;\n               index index.jsp index.html index.htm;\n        }\n    }\n\n```\n2.安装访问验证工具\n\nUbuntu: `# apt install apache2-utils`\n\nCentOS: `# yum install httpd-tools`\n\n3.设置验证用户名及密码\n\n`# mkdir -p /usr/local/src/nginx/`\n\n`# htpasswd -c /usr/local/src/nginx/passwd admis`  \npasswd为密码文件，admis为用户名\n\n4.修改nginx站点配置文件,修改完成后重启nginx服务\n\n```\nserver {  \n     listen 80;  \n     server_name  localhost;  \n     …….  \n     #新增下面两行  \n     auth_basic \"Please input password\"; #这里是验证时的提示信息  \n     auth_basic_user_file /usr/local/src/nginx/passwd;  \n     location /{  \n     …….  \n }\n }\n```","source":"_posts/nginx-settings.md","raw":"---\ntitle: nginx反向代理及设置访问站点密码\ndate: 2023-09-26 17:50:48\ntags:\n---\n1.在/etc/nginx/conf.d目录下修改站点配置文件,修改完成后重启服务\n\n```\nserver {\n        listen 80;\n        server_name admin.service.com;\n        location / {\n               proxy_pass http://192.168.1.123:8090;\n               index index.jsp index.html index.htm;\n        }\n    }\n\n```\n2.安装访问验证工具\n\nUbuntu: `# apt install apache2-utils`\n\nCentOS: `# yum install httpd-tools`\n\n3.设置验证用户名及密码\n\n`# mkdir -p /usr/local/src/nginx/`\n\n`# htpasswd -c /usr/local/src/nginx/passwd admis`  \npasswd为密码文件，admis为用户名\n\n4.修改nginx站点配置文件,修改完成后重启nginx服务\n\n```\nserver {  \n     listen 80;  \n     server_name  localhost;  \n     …….  \n     #新增下面两行  \n     auth_basic \"Please input password\"; #这里是验证时的提示信息  \n     auth_basic_user_file /usr/local/src/nginx/passwd;  \n     location /{  \n     …….  \n }\n }\n```","slug":"nginx-settings","published":1,"updated":"2023-09-26T09:57:43.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5l0004bzpbb3re85sf","content":"<p>1.在&#x2F;etc&#x2F;nginx&#x2F;conf.d目录下修改站点配置文件,修改完成后重启服务</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">server</span> &#123;<br>        <span class=\"hljs-keyword\">listen</span> <span class=\"hljs-number\">80</span>;<br>        server_name <span class=\"hljs-keyword\">admin</span>.service.com;<br>        <span class=\"hljs-keyword\">location</span> / &#123;<br>               proxy_pass http://<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.123</span>:<span class=\"hljs-number\">8090</span>;<br>               <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">index</span>.jsp <span class=\"hljs-keyword\">index</span>.html <span class=\"hljs-keyword\">index</span>.htm;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure>\n<p>2.安装访问验证工具</p>\n<p>Ubuntu: <code># apt install apache2-utils</code></p>\n<p>CentOS: <code># yum install httpd-tools</code></p>\n<p>3.设置验证用户名及密码</p>\n<p><code># mkdir -p /usr/local/src/nginx/</code></p>\n<p><code># htpasswd -c /usr/local/src/nginx/passwd admis</code><br>passwd为密码文件，admis为用户名</p>\n<p>4.修改nginx站点配置文件,修改完成后重启nginx服务</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">server &#123;  <br>     listen <span class=\"hljs-number\">80</span>;  <br>     server_name  localhost;  <br>     …….  <br>     <span class=\"hljs-comment\">#新增下面两行  </span><br>     auth_basic <span class=\"hljs-string\">&quot;Please input password&quot;</span>; <span class=\"hljs-comment\">#这里是验证时的提示信息  </span><br>     auth_basic_user_file <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/src/</span>nginx/passwd;  <br>     location /&#123;  <br>     …….  <br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>1.在&#x2F;etc&#x2F;nginx&#x2F;conf.d目录下修改站点配置文件,修改完成后重启服务</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">server</span> &#123;<br>        <span class=\"hljs-keyword\">listen</span> <span class=\"hljs-number\">80</span>;<br>        server_name <span class=\"hljs-keyword\">admin</span>.service.com;<br>        <span class=\"hljs-keyword\">location</span> / &#123;<br>               proxy_pass http://<span class=\"hljs-number\">192.168</span><span class=\"hljs-number\">.1</span><span class=\"hljs-number\">.123</span>:<span class=\"hljs-number\">8090</span>;<br>               <span class=\"hljs-keyword\">index</span> <span class=\"hljs-keyword\">index</span>.jsp <span class=\"hljs-keyword\">index</span>.html <span class=\"hljs-keyword\">index</span>.htm;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure>\n<p>2.安装访问验证工具</p>\n<p>Ubuntu: <code># apt install apache2-utils</code></p>\n<p>CentOS: <code># yum install httpd-tools</code></p>\n<p>3.设置验证用户名及密码</p>\n<p><code># mkdir -p /usr/local/src/nginx/</code></p>\n<p><code># htpasswd -c /usr/local/src/nginx/passwd admis</code><br>passwd为密码文件，admis为用户名</p>\n<p>4.修改nginx站点配置文件,修改完成后重启nginx服务</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">server &#123;  <br>     listen <span class=\"hljs-number\">80</span>;  <br>     server_name  localhost;  <br>     …….  <br>     <span class=\"hljs-comment\">#新增下面两行  </span><br>     auth_basic <span class=\"hljs-string\">&quot;Please input password&quot;</span>; <span class=\"hljs-comment\">#这里是验证时的提示信息  </span><br>     auth_basic_user_file <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/src/</span>nginx/passwd;  <br>     location /&#123;  <br>     …….  <br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure>"},{"title":"owncloud安装后常见配置问题","date":"2023-09-26T09:47:03.000Z","_content":"1.PHP 的设置似乎有问题, 无法获取系统环境变量. 使用 getenv(\\\\”PATH\\\\”) 测试时仅返回空结果。\n\n编辑`/etc/php/7.3/fpm/php-fpm.conf`配置文件\n\n```\nenv[PATH] = /usr/local/bin:/usr/bin:/bin:/usr/local/php/bin\n```\n\n将上面的代码粘贴到配置文件的最后一行，重启php7.3-fpm\n\n2.HTTP 严格传输安全（Strict-Transport-Security）报头未配置到至少“15552000”秒。处于增强安全性考虑，我们推荐按照安全提示启用 HSTS。\n\n编辑网站的配置文件“vhost.conf”文件找到对应网站的433端口段添加下面代码（保存后重启nginx）\n\n```\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n```","source":"_posts/owncloud-extra.md","raw":"---\ntitle: owncloud安装后常见配置问题\ndate: 2023-09-26 17:47:03\ntags:\n---\n1.PHP 的设置似乎有问题, 无法获取系统环境变量. 使用 getenv(\\\\”PATH\\\\”) 测试时仅返回空结果。\n\n编辑`/etc/php/7.3/fpm/php-fpm.conf`配置文件\n\n```\nenv[PATH] = /usr/local/bin:/usr/bin:/bin:/usr/local/php/bin\n```\n\n将上面的代码粘贴到配置文件的最后一行，重启php7.3-fpm\n\n2.HTTP 严格传输安全（Strict-Transport-Security）报头未配置到至少“15552000”秒。处于增强安全性考虑，我们推荐按照安全提示启用 HSTS。\n\n编辑网站的配置文件“vhost.conf”文件找到对应网站的433端口段添加下面代码（保存后重启nginx）\n\n```\nadd_header Strict-Transport-Security \"max-age=63072000; includeSubdomains; preload\";\n```","slug":"owncloud-extra","published":1,"updated":"2023-09-26T09:47:49.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5m0005bzpbd2bz47kl","content":"<p>1.PHP 的设置似乎有问题, 无法获取系统环境变量. 使用 getenv(\\”PATH\\”) 测试时仅返回空结果。</p>\n<p>编辑<code>/etc/php/7.3/fpm/php-fpm.conf</code>配置文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">env[<span class=\"hljs-variable constant_\">PATH</span>] = <span class=\"hljs-regexp\">/usr/local</span><span class=\"hljs-regexp\">/bin:/usr</span><span class=\"hljs-regexp\">/bin:/bin</span><span class=\"hljs-symbol\">:/usr/local/php/bin</span><br></code></pre></td></tr></table></figure>\n\n<p>将上面的代码粘贴到配置文件的最后一行，重启php7.3-fpm</p>\n<p>2.HTTP 严格传输安全（Strict-Transport-Security）报头未配置到至少“15552000”秒。处于增强安全性考虑，我们推荐按照安全提示启用 HSTS。</p>\n<p>编辑网站的配置文件“vhost.conf”文件找到对应网站的433端口段添加下面代码（保存后重启nginx）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">add_header <span class=\"hljs-keyword\">Strict</span>-Transport-<span class=\"hljs-keyword\">Security</span> &quot;max-age=63072000; includeSubdomains; preload&quot;;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>1.PHP 的设置似乎有问题, 无法获取系统环境变量. 使用 getenv(\\”PATH\\”) 测试时仅返回空结果。</p>\n<p>编辑<code>/etc/php/7.3/fpm/php-fpm.conf</code>配置文件</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ruby\">env[<span class=\"hljs-variable constant_\">PATH</span>] = <span class=\"hljs-regexp\">/usr/local</span><span class=\"hljs-regexp\">/bin:/usr</span><span class=\"hljs-regexp\">/bin:/bin</span><span class=\"hljs-symbol\">:/usr/local/php/bin</span><br></code></pre></td></tr></table></figure>\n\n<p>将上面的代码粘贴到配置文件的最后一行，重启php7.3-fpm</p>\n<p>2.HTTP 严格传输安全（Strict-Transport-Security）报头未配置到至少“15552000”秒。处于增强安全性考虑，我们推荐按照安全提示启用 HSTS。</p>\n<p>编辑网站的配置文件“vhost.conf”文件找到对应网站的433端口段添加下面代码（保存后重启nginx）</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">add_header <span class=\"hljs-keyword\">Strict</span>-Transport-<span class=\"hljs-keyword\">Security</span> &quot;max-age=63072000; includeSubdomains; preload&quot;;<br></code></pre></td></tr></table></figure>"},{"title":"使用Let’s Encrypt配置HTTPS","date":"2023-09-26T09:40:09.000Z","_content":"注意：教程使用Ubuntu18.04+Nginx\n\n**一、安装Certbot**\n\n```\n$ sudo add-apt-repository ppa:certbot/certbot\n$ sudo apt-get update\n$ sudo apt-get install certbot  python-certbot-nginx\n```\n\n如果在执行上述命令时提示命令不存在，可能是没有安装add-apt-repository，请按以下命令安装\n\n```\n$ sudo apt-get install python-software-properties software-properties-common \n```\n\n**二、生成证书**\n\n执行以下命令，然后按照提示一步一步操作\n\n```\n$ sudo certbot --nginx\n```\n\n**备注：**  \nprivkey.pem 这是私匙，对应Nginx的ssl\\_certificate\\_key选项。  \ncert.pem 服务器证书，对应SSLCertificateFile选项。  \nchain.pem 除服务器证书之外的所有证书，Nginx对应ssl\\_trusted\\_certificate选项。  \nfullchain.pem 包括上面的服务器证书和其他证书，Nginx对应ssl\\_certificate选项。\n\n**三、更新证书**\n\nLet’s Encrypt的证书权威且安全，就是有效期只有90天。过期前需要续时间。运行命令`sudo certbot renew`即可续时间，如果还没到过期时间，运行命令也不会有大碍。当然你可以使用命令测试`sudo certbot renew --dry-run`。可以根据需要自己写一个脚本或者cron定时更新证书。","source":"_posts/setting-https.md","raw":"---\ntitle: 使用Let’s Encrypt配置HTTPS\ndate: 2023-09-26 17:40:09\ntags:\n---\n注意：教程使用Ubuntu18.04+Nginx\n\n**一、安装Certbot**\n\n```\n$ sudo add-apt-repository ppa:certbot/certbot\n$ sudo apt-get update\n$ sudo apt-get install certbot  python-certbot-nginx\n```\n\n如果在执行上述命令时提示命令不存在，可能是没有安装add-apt-repository，请按以下命令安装\n\n```\n$ sudo apt-get install python-software-properties software-properties-common \n```\n\n**二、生成证书**\n\n执行以下命令，然后按照提示一步一步操作\n\n```\n$ sudo certbot --nginx\n```\n\n**备注：**  \nprivkey.pem 这是私匙，对应Nginx的ssl\\_certificate\\_key选项。  \ncert.pem 服务器证书，对应SSLCertificateFile选项。  \nchain.pem 除服务器证书之外的所有证书，Nginx对应ssl\\_trusted\\_certificate选项。  \nfullchain.pem 包括上面的服务器证书和其他证书，Nginx对应ssl\\_certificate选项。\n\n**三、更新证书**\n\nLet’s Encrypt的证书权威且安全，就是有效期只有90天。过期前需要续时间。运行命令`sudo certbot renew`即可续时间，如果还没到过期时间，运行命令也不会有大碍。当然你可以使用命令测试`sudo certbot renew --dry-run`。可以根据需要自己写一个脚本或者cron定时更新证书。","slug":"setting-https","published":1,"updated":"2023-09-26T09:46:23.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cln05ap5m0006bzpbgjth1zj7","content":"<p>注意：教程使用Ubuntu18.04+Nginx</p>\n<p><strong>一、安装Certbot</strong></p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">$ sudo<span class=\"hljs-built_in\"> add-apt-repository </span>ppa:certbot/certbot<br>$ sudo apt-get update<br>$ sudo apt-get install certbot  python-certbot-nginx<br></code></pre></td></tr></table></figure>\n\n<p>如果在执行上述命令时提示命令不存在，可能是没有安装add-apt-repository，请按以下命令安装</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">$ sudo apt-<span class=\"hljs-built_in\">get</span> install python-software-<span class=\"hljs-built_in\">properties</span> software-<span class=\"hljs-built_in\">properties</span>-common <br></code></pre></td></tr></table></figure>\n\n<p><strong>二、生成证书</strong></p>\n<p>执行以下命令，然后按照提示一步一步操作</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ sudo certbot <span class=\"hljs-comment\">--nginx</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>备注：</strong><br>privkey.pem 这是私匙，对应Nginx的ssl_certificate_key选项。<br>cert.pem 服务器证书，对应SSLCertificateFile选项。<br>chain.pem 除服务器证书之外的所有证书，Nginx对应ssl_trusted_certificate选项。<br>fullchain.pem 包括上面的服务器证书和其他证书，Nginx对应ssl_certificate选项。</p>\n<p><strong>三、更新证书</strong></p>\n<p>Let’s Encrypt的证书权威且安全，就是有效期只有90天。过期前需要续时间。运行命令<code>sudo certbot renew</code>即可续时间，如果还没到过期时间，运行命令也不会有大碍。当然你可以使用命令测试<code>sudo certbot renew --dry-run</code>。可以根据需要自己写一个脚本或者cron定时更新证书。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>注意：教程使用Ubuntu18.04+Nginx</p>\n<p><strong>一、安装Certbot</strong></p>\n<figure class=\"highlight smali\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs smali\">$ sudo<span class=\"hljs-built_in\"> add-apt-repository </span>ppa:certbot/certbot<br>$ sudo apt-get update<br>$ sudo apt-get install certbot  python-certbot-nginx<br></code></pre></td></tr></table></figure>\n\n<p>如果在执行上述命令时提示命令不存在，可能是没有安装add-apt-repository，请按以下命令安装</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">$ sudo apt-<span class=\"hljs-built_in\">get</span> install python-software-<span class=\"hljs-built_in\">properties</span> software-<span class=\"hljs-built_in\">properties</span>-common <br></code></pre></td></tr></table></figure>\n\n<p><strong>二、生成证书</strong></p>\n<p>执行以下命令，然后按照提示一步一步操作</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ada\">$ sudo certbot <span class=\"hljs-comment\">--nginx</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>备注：</strong><br>privkey.pem 这是私匙，对应Nginx的ssl_certificate_key选项。<br>cert.pem 服务器证书，对应SSLCertificateFile选项。<br>chain.pem 除服务器证书之外的所有证书，Nginx对应ssl_trusted_certificate选项。<br>fullchain.pem 包括上面的服务器证书和其他证书，Nginx对应ssl_certificate选项。</p>\n<p><strong>三、更新证书</strong></p>\n<p>Let’s Encrypt的证书权威且安全，就是有效期只有90天。过期前需要续时间。运行命令<code>sudo certbot renew</code>即可续时间，如果还没到过期时间，运行命令也不会有大碍。当然你可以使用命令测试<code>sudo certbot renew --dry-run</code>。可以根据需要自己写一个脚本或者cron定时更新证书。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}