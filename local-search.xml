<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>手动安装AList及配置反向代理</title>
    <link href="/2025/02/03/alist/"/>
    <url>/2025/02/03/alist/</url>
    
    <content type="html"><![CDATA[<h2 id="获取-AList"><a href="#获取-AList" class="headerlink" title="获取 AList"></a><strong>获取 AList</strong></h2><p>打开 <a href="https://github.com/Xhofe/alist/releases">AList</a> 下载待部署系统对应的文件。最新版的前端已经和后端打包好了，不用再下载前端文件了。</p><p>xxxx 指的是不同系统&#x2F;架构对应的名称，一般 Linux-x86&#x2F;64 为 alist-linux-amd64</p><p>手动安装如果有如下提示：是因为<a href="https://alist.nn.ci/zh/faq/why.html#lib64-libc-so-6-version-glibc-2-28-not-found-required-by-alist-%E6%88%96%E8%80%85-accept-function-not-implemented">你的 GLIBC 版本太低</a>，建议下载 musl 版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">lib64<span class="hljs-regexp">/libc.so.6: version `GLIBC_2.28&#x27; not found (required by ./</span>alist)  <br><span class="hljs-comment">#或者</span><br>accept: <span class="hljs-keyword">function</span> not implemented<br></code></pre></td></tr></table></figure><p>当你看到 <code>start server@0.0.0.0:5244</code> 的输出，之后没有报错，说明操作成功。 第一次运行时会输出初始密码。程序默认监听 5244 端口。 现在打开 <code>http://ip:5244</code> 可以看到登录页面，WebDAV 请参阅 <a href="https://alist.nn.ci/zh/guide/webdav.html">WebDav</a>。</p><h2 id="手动运行"><a href="#手动运行" class="headerlink" title="手动运行"></a><strong>手动运行</strong></h2><p>v3.25.0以上版本将密码改成加密方式存储的hash值，无法直接反算出密码，如果忘记了密码只能通过重新 <strong><code>随机生成</code></strong> 或者 <strong><code>手动设置</code></strong></p><p><strong>以Linux系统为例</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 解压下载的文件，得到可执行文件：</span><br>tar -zxvf alist-xxxx.tar.gz<br><span class="hljs-comment"># 授予程序执行权限：</span><br><span class="hljs-built_in">chmod</span> +x alist<br><span class="hljs-comment"># 运行程序</span><br>./alist server<br><br><span class="hljs-comment"># 获得管理员信息 以下两个不同版本，新版本也有随机生成和手动设置</span><br><span class="hljs-comment"># 低于v3.25.0版本</span><br>./alist admin<br><br><span class="hljs-comment"># 高于v3.25.0版本</span><br><span class="hljs-comment"># 随机生成一个密码</span><br>./alist admin random<br><span class="hljs-comment"># 手动设置一个密码 `NEW_PASSWORD`是指你需要设置的密码</span><br>./alist admin <span class="hljs-built_in">set</span> NEW_PASSWORD<br></code></pre></td></tr></table></figure><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a><strong>守护进程</strong></h2><p><strong>以Linux系统为例</strong><br>使用任意方式编辑 <code>/usr/lib/systemd/system/alist.service</code> 并添加如下内容，其中 path_alist 为 AList 所在的路径</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=alist<br><span class="hljs-attr">After</span>=network.target<br> <br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=simple<br><span class="hljs-attr">WorkingDirectory</span>=path_alist<br><span class="hljs-attr">ExecStart</span>=path_alist/alist server<br><span class="hljs-attr">Restart</span>=<span class="hljs-literal">on</span>-failure<br> <br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>然后，执行 <code>systemctl daemon-reload</code> 重载配置，现在你可以使用这些命令来管理程序：</p><ul><li>启动: <code>systemctl start alist</code></li><li>关闭: <code>systemctl stop alist</code></li><li>配置开机自启: <code>systemctl enable alist</code></li><li>取消开机自启: <code>systemctl disable alist</code></li><li>状态: <code>systemctl status alist</code></li><li>重启: <code>systemctl restart alist</code></li></ul><p>守护进程不配置? <a href="https://www.bilibili.com/video/BV1rF41197Qv?t=187.0"><strong>视频教程</strong></a></p><h2 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a><strong>相关信息</strong></h2><p>对于所有平台，您可以使用以下命令来静默启动、停止和重新启动。 （v3.4.0 及更高版本）</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 携带`--force-bin-dir`参数启动服务</span><br>alist <span class="hljs-literal">start</span><br><span class="hljs-comment"># 通过pid停止服务</span><br>alist <span class="hljs-literal">stop</span><br><span class="hljs-comment"># 通过pid重启服务</span><br>alist restart<br></code></pre></td></tr></table></figure><h2 id="如何更新"><a href="#如何更新" class="headerlink" title="如何更新"></a><strong>如何更新</strong></h2><p>下载新版Alist，把之前的替换了即可。</p><ul><li>启动: <code>systemctl start alist</code></li><li>关闭: <code>systemctl stop alist</code></li><li>状态: <code>systemctl status alist</code></li><li>重启: <code>systemctl restart alist</code></li></ul><h2 id="获取密码"><a href="#获取密码" class="headerlink" title="获取密码"></a><strong>获取密码</strong></h2><p>需要进入脚本安装AList的目录文件夹內执行如下命令</p><h4 id="低于v3-25-0版本"><a href="#低于v3-25-0版本" class="headerlink" title="低于v3.25.0版本"></a>低于v3.25.0版本</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./alist admin<br></code></pre></td></tr></table></figure><h4 id="高于v3-25-0版本"><a href="#高于v3-25-0版本" class="headerlink" title="高于v3.25.0版本"></a>高于v3.25.0版本</h4><p>3.25.0以上版本将密码改成加密方式存储的hash值，无法直接反算出密码，如果忘记了密码只能通过重新 <strong><code>随机生成</code></strong> 或者 <strong><code>手动设置</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 随机生成一个密码</span><br>./alist admin random<br><span class="hljs-comment"># 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码</span><br>./alist admin <span class="hljs-built_in">set</span> NEW_PASSWORD<br></code></pre></td></tr></table></figure><h2 id="一直在加载怎么办"><a href="#一直在加载怎么办" class="headerlink" title="一直在加载怎么办?"></a><strong>一直在加载怎么办?</strong></h2><p>挂载了一些网盘但是不能用了重启了一下AList，发现进不去 网页提示：<code>获取设置失败：请稍后，正在加载存储</code>怎么办？</p><ol><li>等待几分钟</li><li>通过使用命令将<code>失效的/无法启动的</code>存储停止运行</li></ol><p><strong>以Linux系统为例</strong><br>如果通过命令停止 必须先进入你AList所在的文件夹输入命令<br>如果我们不知道是那个存储原因导致的，可以通过命令列出所有的存储</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./alist storage list<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@OPSD-g8xXordx3B9f alist]# ./alist storage list<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:10] reading<span class="hljs-built_in"> config </span>file: data/config.json<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:10] load<span class="hljs-built_in"> config </span><span class="hljs-keyword">from</span> env with prefix: ALIST_<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:10] init logrus<span class="hljs-built_in">..</span>.<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:10] Found 2 storages<br>┌─────────────────────────────────────────────────────────────────┐<br>│ ID    Driver            Mount Path                      Enabled │<br>│─────────────────────────────────────────────────────────────────│<br>│ 1     S3                /R2                             <span class="hljs-literal">true</span>    │<br>│ 2     UrlTree           /233                            <span class="hljs-literal">true</span>    │<br>└─────────────────────────────────────────────────────────────────┘<br></code></pre></td></tr></table></figure><p>输入查询命令后我们会进入另一种模式无法输入，如果添加的存储过多可以通过键盘的 ↑ 和 ↓ 来往下翻，等找到后可以按<code>Ctrl+C</code>退出</p><p>例如我们是因为 <code>233</code> 这个存储停止的，我们就输入命令来停止，然后在 重启一下AList就可以了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">.<span class="hljs-regexp">/alist storage disable /</span><span class="hljs-number">233</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">[root@OPSD-g8xXordx3B9f alist]# ./alist storage <span class="hljs-built_in">disable</span> /233<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:52] reading<span class="hljs-built_in"> config </span>file: data/config.json<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:52] load<span class="hljs-built_in"> config </span><span class="hljs-keyword">from</span> env with prefix: ALIST_<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:52] init logrus<span class="hljs-built_in">..</span>.<br><span class="hljs-built_in">INFO</span>[2023-11-23 17:54:52] Storage with mount path [/233] have been disabled<br></code></pre></td></tr></table></figure><h2 id="设置反向代理"><a href="#设置反向代理" class="headerlink" title="设置反向代理"></a><strong>设置反向代理</strong></h2><p><a href="https://i.nn.ci/">Andy Hsu</a>2022年9月11日GuideInstallGuide大约 2 分钟</p><p>程序默认监听 5244 端口。如有修改，请一并修改下列配置中的端口号。如果你使用反向代理，建议你设置<a href="https://alist.nn.ci/zh/config/configuration.html#site_url">site_url</a>，以帮助alist更好的工作。</p><h2 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a><strong>nginx</strong></h2><p>在网站配置文件的 server 字段中添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto <span class="hljs-variable">$scheme</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$http_host</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>  <span class="hljs-attribute">proxy_set_header</span> Range <span class="hljs-variable">$http_range</span>;<br><span class="hljs-attribute">proxy_set_header</span> If-Range <span class="hljs-variable">$http_if_range</span>;<br>  <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br>  <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:5244;<br>  <span class="hljs-comment"># the max size of file to upload</span><br>  <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">20000m</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果需要使用HTTP&#x2F;3，需要将对应<code>HOST</code>行修改为：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br></code></pre></td></tr></table></figure><p>这样修改后的配置同时也可以兼容HTTP&#x2F;2及更低版本的请求。</p><p><strong>注意</strong></p><p>如果使用宝塔面板，请务必删除以下默认配置</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coq">- location ~ ^/(\.user.ini|<span class="hljs-type">\.htaccess</span>|<span class="hljs-type">\.git</span>|<span class="hljs-type">\.svn</span>|<span class="hljs-type">\.project</span>|<span class="hljs-type">LICENSE</span>|<span class="hljs-type">README</span>.md<br>- location ~ .\*\.(gif|<span class="hljs-type">jpg</span>|<span class="hljs-type">jpeg</span>|<span class="hljs-type">png</span>|<span class="hljs-type">bmp</span>|<span class="hljs-type">swf</span>)$<br>- location ~ .\*\.(js|<span class="hljs-type">css</span>)?$<br></code></pre></td></tr></table></figure><p>并在<code>/www/server/nginx/conf/proxy.conf</code>中或对应网站配置文件中设置禁用Nginx缓存，否则默认配置下访问较大文件时Nginx会先尝试将远程文件缓存至本机，导致播放失败</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">proxy_cache</span> cache_one; <span class="hljs-comment"># 删除这一行</span><br><span class="hljs-attribute">proxy_max_temp_file_size</span> <span class="hljs-number">0</span>; <span class="hljs-comment">#加上这一行</span><br></code></pre></td></tr></table></figure><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a><strong>Apache</strong></h2><p>在 VirtualHost 字段下添加配置项 ProxyPass，如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;VirtualHost *<span class="hljs-number">:80</span>&gt;</span><br>    <span class="hljs-attribute">ServerName</span> myapp.example.com<br>    <span class="hljs-attribute">ServerAdmin</span> webmaster@example.com<br>    <span class="hljs-attribute">DocumentRoot</span> /www/myapp/public<br><br>    <span class="hljs-attribute">AllowEncodedSlashes</span> NoDecode<br>    <span class="hljs-attribute">ProxyPreserveHost</span> <span class="hljs-literal">On</span><br>    <span class="hljs-attribute">ProxyPass</span> <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1:5244/&quot;</span> nocanon<br>    <span class="hljs-attribute">ProxyPassReverse</span> <span class="hljs-string">&quot;/&quot;</span> <span class="hljs-string">&quot;http://127.0.0.1:5244/&quot;</span> nocanon<br><span class="hljs-section">&lt;/VirtualHost&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Caddy"><a href="#Caddy" class="headerlink" title="Caddy"></a><strong>Caddy</strong></h2><p>在 Caddyfile 文件下添加 reverse_proxy，如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">:<span class="hljs-number">80</span> &#123;<br>  reverse_proxy <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">5244</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果部署在 443 端口正常使用的服务器上且使用域名进行访问，建议使用这种配置让 Caddy 自动申请证书：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">example.com &#123;<br><span class="hljs-title">  reverse_proxy 127.0.0.1:</span><span class="hljs-number">5244</span><br>&#125;<br><br>将 `example.com` 替换为你自己解析后的域名。<br><br></code></pre></td></tr></table></figure><p><a href="https://alist.nn.ci/zh/guide/install/manual.html">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何下载和安装 macOS</title>
    <link href="/2024/12/17/macos/"/>
    <url>/2024/12/17/macos/</url>
    
    <content type="html"><![CDATA[<h2 id="如何下载和安装-macOS"><a href="#如何下载和安装-macOS" class="headerlink" title="如何下载和安装 macOS"></a>如何下载和安装 macOS</h2><p>在兼容的 Mac 电脑上下载并安装最新或以前版本的 Mac 操作系统。</p><p>为了保持电脑的安全性、稳定性和兼容性，Apple 建议使用与你的 Mac 兼容的最新版 macOS。macOS 更新和升级还包含最新的功能和内建 App（如 Safari 浏览器）。</p><h2 id="使用“软件更新”"><a href="#使用“软件更新”" class="headerlink" title="使用“软件更新”"></a>使用“软件更新”</h2><p>“软件更新”是获取 macOS 更新和升级的最快、最简单的途径，它可以使用较少的储存空间来进行下载和安装。</p><p>“软件更新”只会显示与你的 Mac 兼容的软件。如果“软件更新”提示你的 Mac 系统已是最新版本，则说明你的 Mac 机型目前没有可用的新软件。</p><p><a href="https://support.apple.com/zh-cn/108382">如何使用“软件更新”更新 macOS</a></p><h2 id="使用“macOS-恢复”"><a href="#使用“macOS-恢复”" class="headerlink" title="使用“macOS 恢复”"></a>使用“macOS 恢复”</h2><p>如果你想要重新安装 macOS，或者你的 <a href="https://support.apple.com/zh-cn/102675">Mac 因没有可用的操作系统而无法</a>顺利完成启动，你可以使用内建恢复系统来重新安装 macOS。</p><p><a href="https://support.apple.com/zh-cn/102655">如何通过 macOS 恢复功能重新安装 macOS</a></p><h2 id="使用-App-Store"><a href="#使用-App-Store" class="headerlink" title="使用 App Store"></a>使用 App Store</h2><p>要从 App Store 下载 macOS，必须从与相应 macOS 兼容的 Mac 上进行下载。如果你的 Mac 不兼容，App Store 会使“获取”按钮显示为灰色，提示相应 macOS 与这台设备不兼容，或提示请求的 macOS 版本不可用。</p><ol><li><p>使用这些链接在 App Store 中找到相应 macOS。如果以下链接无法正常工作，请用 Safari 浏览器再试一次；Safari 浏览器位于你的“应用程序”文件夹中。</p><ul><li><p><a href="macappstores://apps.apple.com/cn/app/macos-sequoia/id6596773750?mt=12">Sequoia 15</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-sonoma/id6450717509?mt=12">Sonoma 14</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-ventura/id1638787999?mt=12">Ventura 13</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-monterey/id1576738294?mt=12">Monterey 12</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-big-sur/id1526878132?mt=12">Big Sur 11</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-catalina/id1466841314?mt=12">Catalina 10.15</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-mojave/id1398502828?mt=12">Mojave 10.14</a></p></li><li><p><a href="macappstores://apps.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12">High Sierra 10.13</a></p></li></ul></li><li><p>点按 App Store 中的“获取”按钮以开始下载。系统可能会打开“软件更新”并让你从那里下载。</p></li><li><p>下载到“应用程序”文件夹后，安装器将自动打开。按照屏幕上的安装说明操作。或者，在不安装的情况下退出，将安装器留在“应用程序”文件夹中供以后使用。</p></li></ol><h2 id="使用网页浏览器获取较旧的版本"><a href="#使用网页浏览器获取较旧的版本" class="headerlink" title="使用网页浏览器获取较旧的版本"></a>使用网页浏览器获取较旧的版本</h2><p>以下这些较旧的 macOS 版本以磁盘映像的方式提供，你可以使用网页浏览器下载。要从磁盘映像获取安装器，你必须使用与相应 macOS 兼容的 Mac。</p><ol><li><p>使用这些链接下载 macOS 磁盘映像 (.dmg) 文件。如果以下链接无法正常工作，请用 Safari 浏览器再试一次；Safari 浏览器位于你的“应用程序”文件夹中。</p><ul><li><p><a href="http://updates-http.cdn-apple.com/2019/cert/061-39476-20191023-48f365f4-0015-4c41-9f44-39d3d2aca067/InstallOS.dmg">Sierra 10.12</a></p></li><li><p><a href="http://updates-http.cdn-apple.com/2019/cert/061-41424-20191024-218af9ec-cf50-4516-9011-228c78eda3d2/InstallMacOSX.dmg">El Capitan 10.11</a></p></li><li><p><a href="http://updates-http.cdn-apple.com/2019/cert/061-41343-20191023-02465f92-3ab5-4c92-bfe2-b725447a070d/InstallMacOSX.dmg">Yosemite 10.10</a></p></li><li><p><a href="https://updates.cdn-apple.com/2021/macos/031-0627-20210614-90D11F33-1A65-42DD-BBEA-E1D9F43A6B3F/InstallMacOSX.dmg">Mountain Lion 10.8</a></p></li><li><p><a href="https://updates.cdn-apple.com/2021/macos/041-7683-20210614-E610947E-C7CE-46EB-8860-D26D71F0D3EA/InstallMacOSX.dmg">Lion 10.7</a></p></li></ul></li><li><p>连按 .dmg 文件以打开它，并找到其中的软件包 (.pkg) 文件。</p></li><li><p>连按 .pkg 文件，然后按照屏幕上的说明将 macOS 安装器安装到“应用程序”文件夹中。</p></li><li><p>打开“应用程序”文件夹，然后连按两下名为“安装 [<em>版本名称</em>]”的 macOS 安装器。按照屏幕上的安装说明操作。</p></li></ol><h2 id="使用可引导的安装器"><a href="#使用可引导的安装器" class="headerlink" title="使用可引导的安装器"></a>使用可引导的安装器</h2><p>在下列情况中，可引导的安装器可能会很有用：你想在多台电脑上安装 macOS，而又不想每次都下载安装器；或者你无法使用“macOS 恢复”或其他方式进行安装。</p><p>要下载适用于创建可引导安装器的安装器，请<a href="https://support.apple.com/zh-cn/102662#appstore">使用 App Store</a> 或<a href="https://support.apple.com/zh-cn/102662#browser">使用网页浏览器</a>从兼容的 Mac 进行下载。Mac 还必须使用最新版本的 macOS Sierra 或更高版本。</p><p><a href="https://support.apple.com/zh-cn/101578">如何创建可引导的 macOS 安装器</a></p><h2 id="如果你需要协助"><a href="#如果你需要协助" class="headerlink" title="如果你需要协助"></a>如果你需要协助</h2><p><a href="https://support.apple.com/zh-cn/102531">如果在更新或安装 macOS 时发生错误</a></p><p><a href="https://support.apple.com/zh-cn/102624">如果你需要更多储存空间来下载或安装</a></p><p><a href="https://support.apple.com/zh-cn/102675">如果你的 Mac 无法顺利完成启动</a></p><p><a href="https://support.apple.com/zh-cn/102662">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mac Monterey手动编译openssl</title>
    <link href="/2024/10/28/openssl/"/>
    <url>/2024/10/28/openssl/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>mac Monterey 通过homebrew 安装 openssl 失败，被嫌弃系统太老，make test 测试不通过</p><h2 id="下载openssl，并解压"><a href="#下载openssl，并解压" class="headerlink" title="下载openssl，并解压"></a>下载openssl，并解压</h2><p>注意：brew安装软件时，看他下载的是什么版本，就手动下载什么版本</p><p>下载地址:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.openssl.org<span class="hljs-regexp">/source/</span>openssl-<span class="hljs-number">3.4</span>.<span class="hljs-number">0</span>.tar.gz<br></code></pre></td></tr></table></figure><h2 id="配置openssl"><a href="#配置openssl" class="headerlink" title="配置openssl"></a>配置openssl</h2><p>进入解压的目录，执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">perl ./Configure --prefix=/usr/local/Cellar/openssl@3/3.4.0 --openssldir=/usr/local/openssl@3 --libdir=lib no-ssl3 no-ssl3-method no-zlib darwin64-x86_64-cc enable-ec_nistp_64_gcc_128<br></code></pre></td></tr></table></figure><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="1-编译"><a href="#1-编译" class="headerlink" title="1. 编译"></a>1. 编译</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make<br></code></pre></td></tr></table></figure><h3 id="2-测试【可选】"><a href="#2-测试【可选】" class="headerlink" title="2. 测试【可选】"></a>2. 测试【可选】</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make test<br></code></pre></td></tr></table></figure><h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3. 安装"></a>3. 安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make install MANDIR=/usr/local/Cellar/openssl@3/3.4.0/share/man MANSUFFIX=ssl<br></code></pre></td></tr></table></figure><p>查看是否安装完成，新增一个终端，输入以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl version<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">which -a openssl<br></code></pre></td></tr></table></figure><h3 id="4-brew链接openssl"><a href="#4-brew链接openssl" class="headerlink" title="4. brew链接openssl"></a>4. brew链接openssl</h3><p>使用brew链接openssl后，可使用brew管理手动安装的openssl</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew link openssl@3<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>更新vaultwarden服务端</title>
    <link href="/2024/09/16/update-vw/"/>
    <url>/2024/09/16/update-vw/</url>
    
    <content type="html"><![CDATA[<p>更新非常简单，您只需确保保留了已挂载的卷。如果您使用（绑定挂载路径）的方式，则只需使用 <code>pull</code> 拉取最新版本的镜像，再使用 <code>stop</code> 和 <code>rm</code> 来停止和移除当前容器，然后与之前相同的方式启动一个新的容器即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 拉取最新版本的镜像</span><br>docker pull vaultwarden/server:latest<br><br><span class="hljs-comment"># 停止并移除旧版本容器</span><br>docker stop vaultwarden<br>docker <span class="hljs-built_in">rm</span> vaultwarden<br><br><span class="hljs-comment"># 使用已挂载的数据启动容器</span><br>docker run -d --name vaultwarden -v /vw-data/:/data/ -p 80:80 vaultwarden/server:latest<br></code></pre></td></tr></table></figure><p>然后访问 <a href="http://localhost/">http://localhost:80</a></p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu2204安装PHP7.4</title>
    <link href="/2024/01/29/php7-4/"/>
    <url>/2024/01/29/php7-4/</url>
    
    <content type="html"><![CDATA[<h2 id="更新Ubuntu"><a href="#更新Ubuntu" class="headerlink" title="更新Ubuntu"></a>更新Ubuntu</h2><p>首先，更新你的Ubuntu服务器：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo apt <span class="hljs-keyword">update</span> <span class="hljs-operator">&amp;&amp;</span> sudo apt upgrade<br></code></pre></td></tr></table></figure><h2 id="添加PHP存储库"><a href="#添加PHP存储库" class="headerlink" title="添加PHP存储库"></a>添加PHP存储库</h2><p>要安装PHP7.4，需要使用第三方存储库。</p><p>首先，请确保已安装以下软件包，以便可以添加存储库：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">sudo</span> apt install software-properties-<span class="hljs-meta">common</span><br></code></pre></td></tr></table></figure><p>接下来，添加PHP存储库：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:ondrej/php<br></code></pre></td></tr></table></figure><p>最后，更新安装包：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo apt update</span><br></code></pre></td></tr></table></figure><h2 id="安装PHP-7-4"><a href="#安装PHP-7-4" class="headerlink" title="安装PHP 7.4"></a>安装PHP 7.4</h2><p>添加存储库后，可以使用以下命令安装PHP 7.4：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt install php7.<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>此命令将安装其他软件包：</p><ul><li>libapache2-mod-php7.4</li><li>libaprutil1-dbd-sqlite3</li><li>php7.4-cli</li><li>php7.4-common</li><li>php7.4-json</li><li>php7.4-opcache</li><li>php7.4-readline</li><li>等等……<br>就是这样。要检查服务器上是否已安装PHP 7.4，请运行以下命令：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">php -v<br></code></pre></td></tr></table></figure><h2 id="安装PHP7-4模块"><a href="#安装PHP7-4模块" class="headerlink" title="安装PHP7.4模块"></a>安装PHP7.4模块</h2><p>根据你的应用程序，你可能需要其他软件包和模块。可以使用以下命令安装最常用的模块：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sudo</span> apt install php-pear php7.<span class="hljs-number">4</span>-curl php7.<span class="hljs-number">4</span>-dev php7.<span class="hljs-number">4</span>-gd php7.<span class="hljs-number">4</span>-mbstring php7.<span class="hljs-number">4</span>-zip php7.<span class="hljs-number">4</span>-mysql php7.<span class="hljs-number">4</span>-xml php7.<span class="hljs-number">4</span>-fpm<br></code></pre></td></tr></table></figure><p>就这样，你就可以在Ubuntu服务器上开始使用PHP。</p><h2 id="Nginx反代配置"><a href="#Nginx反代配置" class="headerlink" title="Nginx反代配置"></a>Nginx反代配置</h2><p>在 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F;**.conf 中增加PHP相关的配置  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>      <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>      <span class="hljs-attribute">server_name</span>  yourdomainname;<br>      <span class="hljs-attribute">root</span>         /var/www/html;<br>      <br>    <span class="hljs-comment">#  location / &#123;</span><br>    <span class="hljs-comment">#     root   /var/www/html;</span><br>    <span class="hljs-comment">#     index  index.html index.htm;</span><br>    <span class="hljs-comment">#  &#125;</span><br><br>      <span class="hljs-section">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>         <span class="hljs-attribute">include</span> snippets/fastcgi-php.conf;<br>         <span class="hljs-attribute">fastcgi_pass</span> unix:/var/run/php/php7.4-fpm.sock;<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure><p>其中 unix:&#x2F;var&#x2F;run&#x2F;php&#x2F;php7.4-fpm.sock 这个参数在 &#x2F;etc&#x2F;php&#x2F;7.4&#x2F;fpm&#x2F;pool.d&#x2F;<a href="http://www.conf/">www.conf</a> 文件中配置，如果想做负载均衡，也可以把监听端口配置成 IP:Port 的形式。</p><p>修改完成后，使用 nginx -t 命令，测试 nginx.conf 文件，如果正常，重启 nginx，生效。</p>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在Ubuntu22.04上安装Certbot</title>
    <link href="/2024/01/29/certbot-ubuntu2204/"/>
    <url>/2024/01/29/certbot-ubuntu2204/</url>
    
    <content type="html"><![CDATA[<p>在当今的数字时代，确保网站的安全性至关重要。网络安全的一个基本方面是使用SSL&#x2F;TLS证书来加密您的网站与其访问者之间传输的数据。Certbot是一个免费的开源工具，简化了获取和更新SSL&#x2F;TLS证书的过程。</p><h2 id="在-Ubuntu-22-04-LTS-Jammy-Jellyfish-上安装-Certbot"><a href="#在-Ubuntu-22-04-LTS-Jammy-Jellyfish-上安装-Certbot" class="headerlink" title="在 Ubuntu 22.04 LTS Jammy Jellyfish 上安装 Certbot"></a>在 Ubuntu 22.04 LTS Jammy Jellyfish 上安装 Certbot</h2><h3 id="第-1-步。"><a href="#第-1-步。" class="headerlink" title="第 1 步。"></a>第 1 步。</h3><p>在终端中运行以下命令，确保所有系统软件包都是最新的。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo apt update</span><br><span class="hljs-attribute">sudo apt upgrade</span><br></code></pre></td></tr></table></figure><h3 id="第-2-步。"><a href="#第-2-步。" class="headerlink" title="第 2 步。"></a>第 2 步。</h3><p>在 Ubuntu 22.04 上安装 Certbot。</p><p><strong>使用 Snap 包安装 Certbot</strong></p><p>安装 Certbot Snap 软件包：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo snap install <span class="hljs-comment">--classic certbot</span><br></code></pre></td></tr></table></figure><p>创建指向 Certbot 命令的符号链接：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo ln -s <span class="hljs-regexp">/snap/</span>bin<span class="hljs-regexp">/certbot /u</span>sr<span class="hljs-regexp">/bin/</span>certbot<br></code></pre></td></tr></table></figure><p>通过运行以下命令验证 Certbot 是否已正确安装：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">certbot <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>Certbot现在可以使用了。您可以通过运行以下命令来获取证书：</p><p>如果你的Web服务器是Apache，请使用以下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot <span class="hljs-comment">--apache</span><br></code></pre></td></tr></table></figure><p>如果您使用 Nginx 作为您的 Web 服务器，请改用以下命令：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot <span class="hljs-comment">--nginx</span><br></code></pre></td></tr></table></figure><h3 id="第-3-步。"><a href="#第-3-步。" class="headerlink" title="第 3 步。"></a>第 3 步。</h3><p>证书续订配置。</p><p><strong>设置自动续订</strong></p><p>SSL&#x2F;TLS 证书的有效期有限。Certbot可以为您自动化续订过程。要设置自动续订，请添加每天运行两次的 cron 作业：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo crontab -e</span><br></code></pre></td></tr></table></figure><p>将以下行添加到 crontab 文件中：</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">0</span> * * * /<span class="hljs-keyword">usr</span>/bin/certbot renew --quiet<br></code></pre></td></tr></table></figure><p>此作业将每天检查一次即将过期的证书，并在必要时续订证书。</p><p>您可以使用以下命令手动测试续订过程：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">sudo certbot renew <span class="hljs-comment">--dry-run</span><br></code></pre></td></tr></table></figure><h3 id="第-4-步。"><a href="#第-4-步。" class="headerlink" title="第 4 步。"></a>第 4 步。</h3><p>验证 SSL&#x2F;TLS 证书安装。</p><p><strong>网页浏览器测试</strong></p><p>通过Web浏览器并访问您的网页，您应该会在地址栏中看到一个锁图标，表示连接安全。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mac下删除Homebrew包及其依赖</title>
    <link href="/2024/01/01/brew-rmtree/"/>
    <url>/2024/01/01/brew-rmtree/</url>
    
    <content type="html"><![CDATA[<p>假设现在有一个<code>Homebrew</code>包，然后希望删除该包和所有依赖项，但不包含也被其他包依赖的包。</p><h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$ </span>brew tap beeftornado/rmtree<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">$ brew rmtree &lt;<span class="hljs-keyword">package</span>&gt;<br></code></pre></td></tr></table></figure><p>将上面的<code>&lt;package&gt;</code>换成想要删除的包即可。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>删除<code>mpv</code>这个包</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs awk">$ brew rmtree mpv<br>==&gt; Examining installed formulae required by mpv...<br> -  <span class="hljs-number">43</span> / <span class="hljs-number">43</span><br><br>Can safely be removed<br>----------------------<br>automake<br>lua<br>mpg123<br>mpv-player<span class="hljs-regexp">/mpv/</span>libass-ct<br><br>Proceed?[y/N]: y<br>==&gt; Cleaning up packages safe to remove<br><br>Uninstalling <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/m</span>pv/<span class="hljs-number">0.9</span>.<span class="hljs-number">2</span>... (<span class="hljs-number">342</span> files, <span class="hljs-number">35</span>M)<br><br>Uninstalling <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>automake/<span class="hljs-number">1.15</span>... (<span class="hljs-number">130</span> files, <span class="hljs-number">3.2</span>M)<br><br>Uninstalling <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>libass-ct/HEAD... (<span class="hljs-number">9</span> files, <span class="hljs-number">440</span>K)<br><br>Uninstalling <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/</span>lua/<span class="hljs-number">5.2</span>.<span class="hljs-number">4</span>... (<span class="hljs-number">81</span> files, <span class="hljs-number">1.1</span>M)<br><br>Uninstalling <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/Cellar/m</span>pg123/<span class="hljs-number">1.22</span>.<span class="hljs-number">2</span>... (<span class="hljs-number">16</span> files, <span class="hljs-number">656</span>K)<br></code></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>--force</code></td><td>Overrides the dependency check for just the top-level formula you are trying to remove. If you try to remove ‘ruby’ for example, you most likely will not be able to do this because other fomulae specify this as a dependency. This option will let you remove ‘ruby’. This will NOT bypass dependency checks for the formula’s children. If ‘ruby’ depends on ‘git’, then ‘git’ will still not be removed.</td></tr><tr><td><code>--ignore</code></td><td>Ignore some dependencies from removal. This option must appear after the formulae to remove.</td></tr><tr><td><code>--dry-run</code></td><td>Does a dry-run. Goes through the whole process without actually removing anything. This gives you a chance to observe what packages would be removed and a chance to ignore them when you do it for real.</td></tr><tr><td><code>--quiet</code></td><td>No output</td></tr></tbody></table><h2 id="提醒"><a href="#提醒" class="headerlink" title="提醒"></a>提醒</h2><p>软件作者给出了警告，要注意有些打包者没有正确地写好依赖。此外有些包可能此前被单独安装过，但后来又安装了依赖该包的软件，那么在卸载这个后安装的软件时也可能将之前单独安装的软件包一并卸载掉。</p><p><a href="https://github.com/beeftornado/homebrew-rmtree">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Homebrew</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Homebrew安装及配置</title>
    <link href="/2023/12/22/homebrew/"/>
    <url>/2023/12/22/homebrew/</url>
    
    <content type="html"><![CDATA[<h3 id="首次安装-Homebrew-Linuxbrew"><a href="#首次安装-Homebrew-Linuxbrew" class="headerlink" title="首次安装 Homebrew &#x2F; Linuxbrew"></a>首次安装 Homebrew &#x2F; Linuxbrew</h3><p>首先，需要确保系统中安装了 bash、git 和 curl，对于 macOS 用户需额外要求安装 Command Line Tools (CLT) for Xcode。</p><ul><li>对于 macOS 用户，系统自带 bash、git 和 curl，在命令行输入 <code>xcode-select --install</code> 安装 CLT for Xcode 即可。</li><li>对于 Linux 用户，系统自带 bash，仅需额外安装 git 和 curl。</li></ul><p>接着，在终端输入以下几行命令设置环境变量：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_INSTALL_FROM_API</span>=1<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_API_DOMAIN</span>=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_BOTTLE_DOMAIN</span>=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_BREW_GIT_REMOTE</span>=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_CORE_GIT_REMOTE</span>=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span><br></code></pre></td></tr></table></figure><p><em>注：自 <code>brew</code> 4.0 起，<code>HOMEBREW_INSTALL_FROM_API</code> 会成为默认行为，无需设置；大部分用户无需再克隆 homebrew&#x2F;core 仓库，故无需设置 <code>HOMEBREW_CORE_GIT_REMOTE</code> 环境变量。但若需要运行 <code>brew</code> 的开发命令或者 <code>brew</code> 安装在非官方支持的默认 prefix 位置，则仍需设置 <code>HOMEBREW_CORE_GIT_REMOTE</code> 环境变量；如果不想通过 API 安装，可以设置 <code>HOMEBREW_NO_INSTALL_FROM_API=1</code>。</em></p><p>最后，在终端运行以下命令以安装 Homebrew &#x2F; Linuxbrew：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 从本镜像下载安装脚本并安装 Homebrew / Linuxbrew</span><br>git clone --depth=<span class="hljs-number">1</span> https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/git/</span>homebrew/install.git brew-install<br><span class="hljs-regexp">/bin/</span>bash brew-install/install.sh<br>rm -rf brew-install<br><br><span class="hljs-comment"># 也可从 GitHub 获取官方安装脚本安装 Homebrew / Linuxbrew</span><br><span class="hljs-regexp">/bin/</span>bash -c <span class="hljs-string">&quot;$(curl -fsSL https://github.com/Homebrew/install/raw/master/install.sh)&quot;</span><br></code></pre></td></tr></table></figure><p>这样在首次安装的时候也可以使用镜像。更多信息请参考 <a href="https://docs.brew.sh/Installation">Homebrew 官方安装文档</a>。</p><p><em>* 安装成功后需将 brew 程序的相关路径加入到环境变量中：</em></p><ul><li><p><em>以下针对基于 Apple Silicon CPU 设备上的 macOS 系统（命令行运行 <code>uname -m</code> 应输出 <code>arm64</code>）上的 Homebrew：</em></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.bash_profile<br><span class="hljs-keyword">test </span>-r ~/.zprofile &amp;&amp; echo &#x27;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#x27; &gt;&gt; ~/.zprofile<br></code></pre></td></tr></table></figure><p><em>对基于 Intel CPU 设备上的 macOS 系统（命令行运行 <code>uname -m</code> 应输出 <code>x86_64</code>）的用户可跳过本步。</em></p></li><li><p><em>以下针对 Linux 系统上的 Linuxbrew：</em></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>-d ~/.linuxbrew &amp;&amp; eval &quot;$(~/.linuxbrew/bin/brew shellenv)&quot;<br><span class="hljs-keyword">test </span>-d /home/linuxbrew/.linuxbrew &amp;&amp; eval &quot;$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)&quot;<br><span class="hljs-keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.bash_profile<br><span class="hljs-keyword">test </span>-r ~/.profile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.profile<br><span class="hljs-keyword">test </span>-r ~/.zprofile &amp;&amp; echo &quot;eval \&quot;\$($(brew --prefix)/bin/brew shellenv)\&quot;&quot; &gt;&gt; ~/.zprofile<br></code></pre></td></tr></table></figure><p><em>参考了 <a href="https://docs.brew.sh/Homebrew-on-Linux">https://docs.brew.sh/Homebrew-on-Linux</a>。</em></p></li></ul><h3 id="替换现有仓库上游"><a href="#替换现有仓库上游" class="headerlink" title="替换现有仓库上游"></a>替换现有仓库上游</h3><p>替换 brew 程序本身的源，Homebrew &#x2F; Linuxbrew 相同：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_API_DOMAIN</span>=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">HOMEBREW_BREW_GIT_REMOTE</span>=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;</span><br>brew update<br></code></pre></td></tr></table></figure><p>以下针对 macOS 系统上的 Homebrew：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># 手动设置</span><br>export HOMEBREW_CORE_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span><br><br><span class="hljs-comment"># 注：自 brew 4.0 起，大部分 Homebrew 用户无需设置 homebrew/core 和 homebrew/cask 镜像，只需设置 HOMEBREW_API_DOMAIN 即可。</span><br><span class="hljs-comment"># 如果需要使用 Homebrew 的开发命令 (如 `brew cat &lt;formula&gt;`)，则仍然需要设置 homebrew/core 和 homebrew/cask 镜像。</span><br><span class="hljs-comment"># 请按需执行如下两行命令：</span><br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/core https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-core.git<br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/cask https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-cask.git<br><br><span class="hljs-comment"># 除 homebrew/core 和 homebrew/cask 仓库外的 tap 仓库仍然需要设置镜像</span><br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/cask-fonts https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-cask-fonts.git<br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/cask-versions https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-cask-versions.git<br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/command-not-found https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-command-not-found.git<br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/services https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-services.git<br>brew update<br><br><span class="hljs-comment"># 或使用下面的几行命令自动设置</span><br>export HOMEBREW_CORE_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span><br><span class="hljs-keyword">for</span> tap <span class="hljs-keyword">in</span> core cask&#123;,-fonts,-versions&#125; command-not-found services; <span class="hljs-keyword">do</span><br>    brew tap --custom-remote --force-auto-update <span class="hljs-string">&quot;homebrew/$&#123;tap&#125;&quot;</span> <span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-$&#123;tap&#125;.git&quot;</span><br>done<br>brew update<br></code></pre></td></tr></table></figure><p>以下针对 Linux 系统上的 Linuxbrew：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">export HOMEBREW_CORE_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span><br><br><span class="hljs-comment"># 注：自 brew 4.0 起，使用默认 prefix (即 &quot;/home/linuxbrew/.linuxbrew&quot;) 的大部分 Homebrew 用户无需设置 homebrew/core 镜像，只需设置 HOMEBREW_API_DOMAIN 即可。</span><br><span class="hljs-comment"># 如果不是默认 prefix 或者需要使用 Homebrew 的开发命令 (如 `brew cat &lt;formula&gt;`)，则仍然需要设置 homebrew/core 镜像。</span><br><span class="hljs-comment"># 请按需执行如下命令：</span><br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/core https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-core.git<br><br><span class="hljs-comment"># 除 homebrew/core 仓库外的 tap 仓库仍然需要设置镜像</span><br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/command-not-found https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-command-not-found.git<br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/services https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-services.git<br>brew update<br></code></pre></td></tr></table></figure><p><strong>注：如果用户设置了环境变量 <code>HOMEBREW_BREW_GIT_REMOTE</code> 和 <code>HOMEBREW_CORE_GIT_REMOTE</code>，则每次执行 <code>brew update</code> 时，<code>brew</code> 程序本身和 Core Tap (<code>homebrew-core</code>) 的远程将被自动设置。推荐用户将这两个环境变量设置加入 shell 的 profile 设置中。</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;&#x27; &gt;&gt; ~/.bash_profile  # bash<br><span class="hljs-keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.bash_profile  # bash<br><span class="hljs-keyword">test </span>-r ~/.bash_profile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.bash_profile<br><span class="hljs-keyword">test </span>-r ~/.profile &amp;&amp; echo &#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;&#x27; &gt;&gt; ~/.profile<br><span class="hljs-keyword">test </span>-r ~/.profile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.profile<br><span class="hljs-keyword">test </span>-r ~/.profile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.profile<br><br><span class="hljs-keyword">test </span>-r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_API_DOMAIN=&quot;https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles/api&quot;&#x27; &gt;&gt; ~/.zprofile  # zsh<br><span class="hljs-keyword">test </span>-r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_BREW_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git&quot;&#x27; &gt;&gt; ~/.zprofile  # zsh<br><span class="hljs-keyword">test </span>-r ~/.zprofile &amp;&amp; echo &#x27;export HOMEBREW_CORE_GIT_REMOTE=&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;&#x27; &gt;&gt; ~/.zprofile<br></code></pre></td></tr></table></figure><h3 id="Linuxbrew-镜像迁移说明"><a href="#Linuxbrew-镜像迁移说明" class="headerlink" title="Linuxbrew 镜像迁移说明"></a>Linuxbrew 镜像迁移说明</h3><p>Linuxbrew 核心仓库（<code>linuxbrew-core</code>）自 2021 年 10 月 25 日（<code>brew</code> 版本 3.3.0 起）被弃用，Linuxbrew 用户应迁移至 <code>homebrew-core</code>。Linuxbrew 用户请依新版镜像说明重新设置镜像。注意迁移前请先运行 <code>brew update</code> 将 <code>brew</code> 更新至 3.3.0 或以上版本。迁移过程中若出现任何问题，可使用如下命令重新安装 <code>homebrew-core</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">export HOMEBREW_CORE_GIT_REMOTE=<span class="hljs-string">&quot;https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git&quot;</span><br>rm -rf <span class="hljs-string">&quot;$(brew --repo homebrew/core)&quot;</span><br>brew tap --custom-remote --force-auto-update homebrew<span class="hljs-regexp">/core https:/</span><span class="hljs-regexp">/mirrors.tuna.tsinghua.edu.cn/gi</span>t<span class="hljs-regexp">/homebrew/</span>homebrew-core.git<br></code></pre></td></tr></table></figure><h3 id="复原仓库上游"><a href="#复原仓库上游" class="headerlink" title="复原仓库上游"></a>复原仓库上游</h3><p><em>(感谢 Snowonion Lee 提供说明)</em></p><ul><li>以下针对 macOS 系统上的 Homebrew</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># brew 程序本身，Homebrew / Linuxbrew 相同</span><br><span class="hljs-built_in">unset</span> HOMEBREW_BREW_GIT_REMOTE<br>git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew<br><br><span class="hljs-comment"># 以下针对 macOS 系统上的 Homebrew</span><br><span class="hljs-built_in">unset</span> HOMEBREW_API_DOMAIN<br><span class="hljs-built_in">unset</span> HOMEBREW_CORE_GIT_REMOTE<br>BREW_TAPS=<span class="hljs-string">&quot;<span class="hljs-subst">$(BREW_TAPS=<span class="hljs-string">&quot;<span class="hljs-subst">$(brew tap 2&gt;/dev/null)</span>&quot;</span>; echo -n <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BREW_TAPS//$&#x27;\n&#x27;/:&#125;</span>&quot;</span>)</span>&quot;</span><br><span class="hljs-keyword">for</span> tap <span class="hljs-keyword">in</span> core cask&#123;,-fonts,-versions&#125; command-not-found services; <span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-string">&quot;:<span class="hljs-variable">$&#123;BREW_TAPS&#125;</span>:&quot;</span> == *<span class="hljs-string">&quot;:homebrew/<span class="hljs-variable">$&#123;tap&#125;</span>:&quot;</span>* ]]; <span class="hljs-keyword">then</span>  <span class="hljs-comment"># 只复原已安装的 Tap</span><br>        brew tap --custom-remote <span class="hljs-string">&quot;homebrew/<span class="hljs-variable">$&#123;tap&#125;</span>&quot;</span> <span class="hljs-string">&quot;https://github.com/Homebrew/homebrew-<span class="hljs-variable">$&#123;tap&#125;</span>&quot;</span><br>    <span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br><br><span class="hljs-comment"># 重新拉取远程</span><br>brew update<br></code></pre></td></tr></table></figure><ul><li>以下针对 Linux 系统上的 Linuxbrew</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># brew 程序本身，Homebrew / Linuxbrew 相同</span><br><span class="hljs-built_in">unset</span> HOMEBREW_BREW_GIT_REMOTE<br>git -C <span class="hljs-string">&quot;<span class="hljs-subst">$(brew --repo)</span>&quot;</span> remote set-url origin https://github.com/Homebrew/brew<br><br><span class="hljs-comment"># 以下针对 Linux 系统上的 Linuxbrew</span><br><span class="hljs-built_in">unset</span> HOMEBREW_API_DOMAIN<br><span class="hljs-built_in">unset</span> HOMEBREW_CORE_GIT_REMOTE<br>brew tap --custom-remote homebrew/core https://github.com/Homebrew/homebrew-core<br>brew tap --custom-remote homebrew/command-not-found https://github.com/Homebrew/homebrew-command-not-found<br>brew tap --custom-remote homebrew/services https://github.com/Homebrew/homebrew-services<br><br><span class="hljs-comment"># 重新拉取远程</span><br>brew update<br></code></pre></td></tr></table></figure><p><strong>注：重置回默认远程后，用户应该删除 shell 的 profile 设置中的环境变量 <code>HOMEBREW_BREW_GIT_REMOTE</code> 和 <code>HOMEBREW_CORE_GIT_REMOTE</code> 以免运行 <code>brew update</code> 时远程再次被更换。</strong></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移除下载镜像的“Quarantine属性”</title>
    <link href="/2023/12/13/quarantine/"/>
    <url>/2023/12/13/quarantine/</url>
    
    <content type="html"><![CDATA[<p>很多在网上下载的软件都提示要移除下载镜像的Quarantine属性，那么什么是Quarantine属性呢？</p><p>Quarantine属性通常用于描述计算机系统或网络安全领域中的安全特性，其指的是对于具有潜在威胁的文件、程序或数据进行隔离和限制访问的一种机制。</p><p>当一个文件或程序被识别为可能包含恶意代码、病毒、蠕虫等安全威胁时，系统可以将其放置在隔离区域中，以防止其进一步感染系统或网络。这个隔离区域就被称为”quarantine”，隔离期间，该文件或程序不允许执行或访问系统资源，直到被确定为安全或永久删除。</p><p>Quarantine属性可以在许多安全软件或操作系统中找到，例如防病毒软件、防火墙、操作系统的安全设置等。通过使用Quarantine属性，用户可以更好地保护他们的计算机和网络不受安全威胁的侵害。</p><p>苹果系统有一个GateKeeper保护机制（自 OSX 10.5 加入）。从互联网上下载来的文件，会被自动打上com.apple.quarantine标志，翻译过来就是免疫隔离，系统根据这个附加属性对这个文件作出限制。在安装软件的时候需要移除quarantine属性，</p><p>如何解除Quarantine属性呢？</p><p>打开实用工具里的【终端】，在终端复制粘贴输入下面的命令：</p><p><img src="https://pic.imgdb.cn/item/6579afe5c458853aef182b5f.png"></p><p>sudo xattr -r -d com.apple.quarantine+空格+在应用程序中找到App拖入终端里面即可（注意：输入代码中不要带加号）,然后把下载的镜像文件打开，把软件拖拽到终端里就在quarantine后出现文件路径。</p><p><img src="https://pic.imgdb.cn/item/6579afeac458853aef184e91.png"></p><p>拖拽进去后，然后按下回车，然后输入登录密码（输密码的时候光标是不动的，区分好大小写，输完按下回车即可）执行命令；</p><p><a href="https://zhuanlan.zhihu.com/p/611471192">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>调整macOS中的SMB浏览行为</title>
    <link href="/2023/12/05/macos-smb/"/>
    <url>/2023/12/05/macos-smb/</url>
    
    <content type="html"><![CDATA[<p>用于浏览网络文件夹的默认设置（如服务器信息块 (SMB) 共享）适用于大多数组织和用户。尽管如此，你仍可以进行相应的调整来优化企业环境中的 SMB 浏览。</p><p><strong>本文适用于企业和教育机构的系统管理员。</strong></p><p>Mac 会收集相关的文件信息（如标签、标记以及其他形式的元数据），以此确定每个窗口及其内容的显示方式。</p><p>如果文件夹按字母数字进行排序，系统会立即显示相应的内容，然后“访达”会收集这个文件夹的剩余元数据并进行比较。</p><h2 id="加快网络共享内容的浏览速度"><a href="#加快网络共享内容的浏览速度" class="headerlink" title="加快网络共享内容的浏览速度"></a>加快网络共享内容的浏览速度</h2><p>要加快 SMB 文件的浏览速度，你可以阻止 macOS 读取 SMB 共享上的 .DS_Store 文件。这样，“访达”将只使用基本信息来立即以字母数字顺序显示各个文件夹的内容。请使用以下终端命令：</p><p><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool TRUE</code></p><p>然后退出登录 macOS 账户并重新登录。</p><p>要重新启用排序，请使用以下命令：</p><p><code>defaults write com.apple.desktopservices DSDontWriteNetworkStores -bool FALSE</code></p><p><a href="https://support.apple.com/zh-cn/HT208209">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>macOS</category>
      
      <category>SMB</category>
      
    </categories>
    
    
    <tags>
      
      <tag>macOS</tag>
      
      <tag>SMB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About &quot;apt upgrade&quot; and phased updates</title>
    <link href="/2023/11/17/phased-updates/"/>
    <url>/2023/11/17/phased-updates/</url>
    
    <content type="html"><![CDATA[<p>You may have noticed recently that updating your system with apt upgrade sometimes produces a weird message about packages being kept back…like this one:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs text">Reading package lists... Done<br>Building dependency tree... Done<br>Reading state information... Done<br>Calculating upgrade... Done<br>The following packages have been kept back:<br>  (Names of &lt;X&gt; held back packages listed here)<br>0 upgraded, 0 newly installed, 0 to remove and &lt;X&gt; not upgraded.<br></code></pre></td></tr></table></figure><p>If you’ve ever used combinations of packages from different releases or third party repos, you may be familiar with this message already. However, it has become a much more common occurrence due to something called “phased updates”.</p><p><strong>What are phased updates?</strong><br>Phased updates are software updates that are rolled out in stages, rather than being provided to everyone at the same time. Initially, the update is provided only to a small subset of Ubuntu machines. As the update proves to be stable, it is provided to an ever-increasing number of users until everyone has received it (i.e., when the update is “fully phased”).</p><p>The good news is, you don’t need to do anything about the “packages kept back” message – you can safely ignore it. Once the update has been deemed safe for release, you will receive the update automatically.</p><p><strong>Why is Ubuntu doing this?</strong><br>Although updates are thoroughly tested before they get released at all, sometimes bugs can be hidden well enough to escape our attention and make it into a release – especially in highly specific use cases that we didn’t know we needed to test. This can obviously cause problems for our users, and used to be the norm before we phased updates through apt.</p><p>Update phasing makes it much easier for us to detect serious breakages early on – before they have a chance to cause problems for the majority of our users. It gives us the opportunity to hold back the update until the bugs are fixed.</p><p>In other words, it directly benefits our users by increasing the safety, stability and reliability of Ubuntu.</p><p>The phasing system makes it so that different sets of users are chosen to be the first to get the updates, so that there isn’t one group of unlucky people who always get potentially broken updates soon after release.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Note:<br>It should be mentioned here that security updates are never phased.<br></code></pre></td></tr></table></figure><p><strong>Can I turn off phased updates?</strong><br>That depends on how stable you need your system to be. If you just want to avoid any notices about packages being held back during apt updates, and you’re willing to be one of the first people to get updates whenever they’re released, you can turn off phased updates. Be warned, though – if an update is broken, you will almost always be in the first set of people to get it (i.e., you’re basically volunteering yourself as a guinea pig for the early update releases!). It will get rid of the “held back packages” in apt message, though.</p><p>If that doesn’t sound like something you want, leave phased updates on (this is the default). You will still temporarily get the “held back packages” message, but your machine will be more protected from updates that might otherwise break it – and once the packages are ready to be safely installed on your system, they will no longer be held back.</p><p><strong>Can I <code>apt upgrade</code> the individual packages? (and should I?)</strong><br>While you can technically get around phased updates by running apt install on individual held back packages, it’s not recommended. You’re unlikely to break your machine by doing this – as long as the package is being held back due to update phasing.</p><p>If you want to apt upgrade a package, you should first carefully examine the proposed changes that apt would make before you proceed. If the package update was kept back for a reason unrelated to phasing, apt may be forced to remove packages in order to complete your request, which could then cause problems elsewhere.</p><p><strong>How do I turn off phased updates?</strong><br>If you’re sure that you want to disable phased updates, reverting to the old behaviour, you can change apt’s configuration by creating a file in <code>/etc/apt/apt.conf.d</code> called <code>99-Phased-Updates</code> (if <code>/etc/apt/apt.conf.d/99-Phased-Updates</code> doesn’t already exist). In the file, simply add the following lines:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">Update-Manager::Always-Include-Phased-Updates true;<br>APT::Get::Always-Include-Phased-Updates true;<br></code></pre></td></tr></table></figure><p>Again, please only do this if you really know what you’re doing and are absolutely sure you need to do it (for instance, if you are intentionally installing all the latest packages to help test them – and don’t mind if your system breaks). We definitely don’t recommend turning off phased updates if you’re a newer user.</p><p><strong>Why is this suddenly happening now?</strong><br>Phased updates have been part of the update-manager on Ubuntu Desktop for quite a while (since 13.04, in fact!), but were implemented in APT in 21.04. It now works on all versions of Ubuntu (including Ubuntu Server, Raspberry Pi, and containers). Since this includes the 22.04 LTS, it’s now getting a lot more attention as a result!</p><p><strong>How does it actually work?</strong><br>Phased updates depend on a value derived from your machine’s “Machine ID”, as well as the package name and package version. The neat thing about this is that phasing is determined completely at the client end; no identifiable information (or indeed any new information at all) is ever sent to the server to achieve update phasing.</p><p>When the software update is released, the initial subset of machines to receive the update first is chosen at random. Only if there are no problems detected by the first set of users will the update be made available to everyone.</p><p>For more detailed information, including about how changes to phasing are timed, you can check the Ubuntu <a href="https://wiki.ubuntu.com/PhasedUpdates?_ga=2.245926530.746656963.1700205676-1275121081.1694676547">wiki page on phased updates</a>.</p><p><strong>How can I find out more information about currently phased packages?</strong><br>You can find out the phasing details of a package by using the <code>apt policy</code> command:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">apt policy &lt;package&gt;<br></code></pre></td></tr></table></figure><p>For example, at the time of writing, the package <code>libglapi-mesa</code> has a phased update. Running apt policy <code>libglapi-mesa</code> then produces an output like this:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs tetxt">libglapi-mesa:<br>  Installed: 22.0.5-0ubuntu0.3<br>  Candidate: 22.2.5-0ubuntu0.1~22.04.1<br>  Version table:<br> 22.2.5-0ubuntu0.1~22.04.1 500 (phased 20%)<br>    500 http://archive.ubuntu.com/ubuntu jammy-updates/main amd64 Packages<br> *** 22.0.5-0ubuntu0.3 100<br>    100 /var/lib/dpkg/status<br> 22.0.1-1ubuntu2 500<br>    500 http://archive.ubuntu.com/ubuntu jammy/main amd64 Packages<br></code></pre></td></tr></table></figure><p>In this output you can see that this package is 20% phased.</p><p>You can see the status of all packages currently being phased in Ubuntu at <a href="https://people.canonical.com/~ubuntu-archive/phased-updates.html">https://people.canonical.com/~ubuntu-archive/phased-updates.html</a></p><p><em><strong>Note</strong></em>:<br>There is a bug report currently active about the fact that the “kept back” message is not as informative as it could be, and the issue is on our radar. If this issue also affects you, you have an Ubuntu Single Sign-On (SSO) account and can log into Launchpad, you can click on the link near the top of the page that says “This bug affects 85 people. Does this bug affect you?”. If you then click on “Yes, it affects me”, it will increase the bug heat rating, making it more significant.</p><p><a href="https://ubuntu.com/server/docs/about-apt-upgrade-and-phased-updates">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>screenfetch报错&quot;/usr/bin/screenfetch行1851&quot;解决方法</title>
    <link href="/2023/11/17/screenfetch-qa/"/>
    <url>/2023/11/17/screenfetch-qa/</url>
    
    <content type="html"><![CDATA[<p>在debian12（testing）上运行screenfetch报错，如下所示：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs text">~$ screenfetch<br>/usr/bin/screenfetch: 行 1851: -: 语法错误：需要操作数（错误记号是 &quot;-&quot;）<br>         _,met$$$$$gg.           ×××××@deb-test<br>      ,g$$$$$$$$$$$$$$$P.        OS: Debian 12 bookworm<br>    ,g$$P&quot;&quot;       &quot;&quot;&quot;Y$$.&quot;.      Kernel: x86_64 Linux 6.1.0-7-amd64<br>   ,$$P&#x27;              `$$$.      Uptime: 17m<br>  &#x27;,$$P       ,ggs.     `$$b:    Packages: 2065<br>  `d$$&#x27;     ,$P&quot;&#x27;   .    $$$     Shell: bash<br>   $$P      d$&#x27;     ,    $$P     Resolution: 1920x1200<br>   $$:      $$.   -    ,d$$&#x27;     DE: KDE 5.103.0 / Plasma 5.27.2<br>   $$\;      Y$b._   _,d$P&#x27;      WM: KWin<br>   Y$$.    `.`&quot;Y$$$$P&quot;&#x27;          GTK Theme: Breeze [GTK2/3]<br>   `$$b      &quot;-.__               Icon Theme: breeze<br>    `Y$$                         Disk: 501G / 1.1T (48%)<br>     `Y$$.                       CPU: AMD Ryzen 9 5950X 16-Core @ 32x 3.4GHz<br>       `$$b.                     GPU: VMware SVGA II Adapter<br>         `Y$$b.                  RAM: -<br>            `&quot;Y$b._             <br>                `&quot;&quot;&quot;&quot;           <br>                                <br></code></pre></td></tr></table></figure><p>按提示打开&#x2F;usr&#x2F;bin&#x2F;screenfetch这个脚本，可以看到报错位置的上下文是这样的：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">mem=$(free -b | awk -F &#x27;:&#x27; &#x27;NR==2&#123;print $2&#125;&#x27; | awk &#x27;&#123;print $1&quot;-&quot;$6&#125;&#x27;)<br>usedmem=$((mem / 1024 / 1024))<br></code></pre></td></tr></table></figure><p>运行free -b命令，可见正常输出：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">               total        used        free      shared  buff/cache   available<br>内存：   16781590528  3409371136 11827744768   169746432  2212745216 13372219392<br>交换：    1023406080           0  1023406080<br></code></pre></td></tr></table></figure><p>但是运行 free -b | awk -F ‘:’ ‘NR&#x3D;&#x3D;2{print $2}’ 就无输出了。<br>抓耳挠腮的想了一下，才发现在中文的debian系统上，free -b命令所输出内容中的冒号是中文字符，而screenfetch脚本中匹配处理的是英文字符。<br>进行如下丑陋的打补丁后，报错问题解决：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text"># 这是一个丑陋的补丁，用以解决中文系统下的符号识别问题<br># mem=$(free -b | awk -F &#x27;:&#x27; &#x27;NR==2&#123;print $2&#125;&#x27; | awk &#x27;&#123;print $1&quot;-&quot;$6&#125;&#x27;)<br>mem=$(free -b | awk -F &#x27;：&#x27; &#x27;NR==2&#123;print $2&#125;&#x27; | awk &#x27;&#123;print $1&quot;-&quot;$6&#125;&#x27;)<br>usedmem=$((mem / 1024 / 1024))<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/songxi/p/17304225.html">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker安装及配置</title>
    <link href="/2023/11/16/docker/"/>
    <url>/2023/11/16/docker/</url>
    
    <content type="html"><![CDATA[<p>Docker 是一个开源的容器化平台，它允许你构建，测试，并且作为可移动的容器去部署应用，这些容器可以在任何地方运行。一个容器表示一个应用的运行环境，并且包含软件运行所需要的所有依赖软件。<br>Docker 是现代软件开发，持续集成，持续交付的一部分。<br>这篇教程将会涉及如何在 Ubuntu 上安装 Docker。<br>Docker 在标准的 Ubuntu 20.04 软件源中可用，但是可能不是最新的版本。这将会从 Docker 的官方软件源中安装最新的 Docker 软件包。</p><h2 id="一、在-Ubuntu-20-04-上安装-Docker"><a href="#一、在-Ubuntu-20-04-上安装-Docker" class="headerlink" title="一、在 Ubuntu 20.04 上安装 Docker"></a>一、在 Ubuntu 20.04 上安装 Docker</h2><p>在 Ubuntu 上安装 Docker 非常直接。通过启用 Docker 软件源，导入 GPG key，并且安装软件包。<br>首先，更新软件包索引，并且安装必要的依赖软件，来添加一个新的 HTTPS 软件源：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt update<br>sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common<br></code></pre></td></tr></table></figure><p>使用下面的 <code>curl</code> 导入源仓库的 GPG key：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -<br></code></pre></td></tr></table></figure><p>将 Docker APT 软件源添加到你的系统：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo add-apt-repository &quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&quot;<br></code></pre></td></tr></table></figure><p>现在，Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本。</p><p>01.想要安装 Docker 最新版本，运行下面的命令。如果你想安装指定版本，跳过这个步骤，并且跳到下一步。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt update<br>sudo apt install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure><p>02.想要安装指定版本，首先列出 Docker 软件源中所有可用的版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt update<br>apt list -a docker-ce<br></code></pre></td></tr></table></figure><p>可用的 Docker 版本将会在第二列显示。在写作这篇文章的时候，在官方 Docker 软件源中只有一个 Docker 版本（<code> 5:24.0.1-1~ubuntu-focal</code>）可用：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">docker-ce/focal  5:24.0.1-1~ubuntu-focal amd64<br></code></pre></td></tr></table></figure><p>通过在软件包名后面添加版本<code>=&lt;VERSION&gt;</code>来安装指定版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt install docker-ce=&lt;VERSION&gt; docker-ce-cli=&lt;VERSION&gt; containerd.io<br></code></pre></td></tr></table></figure><p>一旦安装完成，Docker 服务将会自动启动。你可以输入下面的命令，验证它：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo systemctl status docker<br></code></pre></td></tr></table></figure><p>输出将会类似下面这样：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs text">● docker.service - Docker Application Container Engine<br>     Loaded: loaded (/lib/systemd/system/docker.service; enabled; vendor preset: enabled)<br>     Active: active (running) since Thu 2020-05-21 14:47:34 UTC; 42s ago<br>...<br></code></pre></td></tr></table></figure><p>当一个新的 Docker 发布时，你可以使用标准的<code>sudo apt update &amp;&amp; sudo apt upgrade</code>流程来升级 Docker 软件包。</p><p>如果你想阻止 Docker 自动更新，锁住它的版本：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt-mark hold docker-ce<br></code></pre></td></tr></table></figure><h2 id="二、配置Docker镜像"><a href="#二、配置Docker镜像" class="headerlink" title="二、配置Docker镜像"></a>二、配置Docker镜像</h2><p>国内从 DockerHub 拉取镜像有时会遇到困难，此时可以配置镜像加速器。Docker 官方和国内很多云服务商都提供了国内加速器服务，例如：</p><ul><li>科大镜像：<a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></li><li>网易：<a href="https://hub-mirror.c.163.com/">https://hub-mirror.c.163.com</a></li><li>阿里云：https:&#x2F;&#x2F;&lt;你的ID&gt;.mirror.aliyuncs.com</li><li>七牛云加速器：<a href="https://reg-mirror.qiniu.com/">https://reg-mirror.qiniu.com</a></li></ul><p>1.新建或编辑daemon.json</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/</span>docker/daemon.json<br></code></pre></td></tr></table></figure><p>2.daemon.json中编辑如下（使用国内镜像需要把文件后缀json修改为conf,例：<code>mv *.json *.conf</code>）</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>        <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>        <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span>,<br>        <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span><br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><p>3.重启docker</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl restart docker</span><br></code></pre></td></tr></table></figure><p>4.执行<code>docker info</code>查看是否修改成功</p><p>当配置某一个加速器地址之后，若发现拉取不到镜像，请切换到另一个加速器地址。国内各大云服务商均提供了 Docker 镜像加速服务，建议根据运行 Docker 的云平台选择对应的镜像加速服务。<br>阿里云镜像<a href="https://cr.console.aliyun.com/">获取地址</a>，登陆后，左侧菜单选择“镜像加速器”就可以看到你的专属地址了。之前还有Docker官方加速器<code>https://registry.docker-cn.com</code>，现在好像已经不能使用了，可以多添加几个国内的镜像，如果有不能使用的，会切换到可以使用的镜像来拉取。</p><p>原文链接 1.<a href="https://zhuanlan.zhihu.com/p/143156163?utm_id=0">Docker安装</a> 2.<a href="https://www.runoob.com/docker/docker-mirror-acceleration.html">Docker镜像配置</a>3.<a href="https://developer.aliyun.com/article/1294592">Docker镜像配置2</a></p>]]></content>
    
    
    <categories>
      
      <category>容器</category>
      
    </categories>
    
    
    <tags>
      
      <tag>容器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自建密码管理器Bitwarden</title>
    <link href="/2023/11/13/build-bitwarden/"/>
    <url>/2023/11/13/build-bitwarden/</url>
    
    <content type="html"><![CDATA[<p><strong>1.前期准备</strong><br>软件安装：docker nginx certbot</p><p><strong>2.docker镜像拉取</strong></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">docker pull vaultwarden/<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><strong>3.启动docker镜像</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker run -d --name vaultwarden -v <span class="hljs-regexp">/vw-data/</span>:<span class="hljs-regexp">/data/</span> -p <span class="hljs-number">8080</span>:<span class="hljs-number">80</span> vaultwarden/server:latest<br></code></pre></td></tr></table></figure><p><strong>4.配置nginx</strong>(示例文件)</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-comment"># The `upstream` directives ensure that you have a http/1.1 connection</span><br><span class="hljs-comment"># This enables the keepalive option and better performance</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Define the server IP and ports here.</span><br>upstream vaultwarden-default &#123;<br>  zone vaultwarden-default <span class="hljs-number">64</span>k;<br>  server <span class="hljs-number">127.0</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>:<span class="hljs-number">8080</span>;<br>  keepalive <span class="hljs-number">2</span>;<br>&#125;<br><br><span class="hljs-comment"># Needed to support websocket connections</span><br><span class="hljs-comment"># See: https://nginx.org/en/docs/http/websocket.html</span><br><span class="hljs-comment"># Instead of &quot;close&quot; as stated in the above link we send an empty value.</span><br><span class="hljs-comment"># Else all keepalive connections will not work.</span><br><span class="hljs-keyword">map</span> $http_upgrade $connection_upgrade &#123;<br>    default upgrade;<br>    <span class="hljs-string">&#x27;&#x27;</span>      <span class="hljs-string">&quot;&quot;</span>;<br>&#125;<br><br><span class="hljs-comment"># Redirect HTTP to HTTPS</span><br>server &#123;<br>    <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">listen</span> [::]:<span class="hljs-number">80</span>;<br>    server_name vaultwarden.example.tld;<br><br>    <span class="hljs-keyword">if</span> ($host = vaultwarden.example.tld) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">301</span> https:<span class="hljs-regexp">//</span>$host$request_uri;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">404</span>;<br>&#125;<br><br>server &#123;<br>    <span class="hljs-comment"># For older versions of nginx appened http2 to the listen line after ssl and remove `http2 on`</span><br>    <span class="hljs-keyword">listen</span> <span class="hljs-number">443</span> ssl;<br>    <span class="hljs-keyword">listen</span> [::]:<span class="hljs-number">443</span> ssl;<br>    http2 on;<br>    server_name vaultwarden.example.tld;<br><br>    <span class="hljs-comment"># Specify SSL Config when needed</span><br>    <span class="hljs-comment">#ssl_certificate /path/to/certificate/letsencrypt/live/vaultwarden.example.tld/fullchain.pem;</span><br>    <span class="hljs-comment">#ssl_certificate_key /path/to/certificate/letsencrypt/live/vaultwarden.example.tld/privkey.pem;</span><br>    <span class="hljs-comment">#ssl_trusted_certificate /path/to/certificate/letsencrypt/live/vaultwarden.example.tld/fullchain.pem;</span><br><br>    client_max_body_size <span class="hljs-number">525</span>M;<br><br>    location / &#123;<br>      proxy_http_version <span class="hljs-number">1.1</span>;<br>      proxy_set_header Upgrade $http_upgrade;<br>      proxy_set_header Connection $connection_upgrade;<br><br>      proxy_set_header Host $host;<br>      proxy_set_header X-Real-IP $remote_addr;<br>      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>      proxy_set_header X-Forwarded-Proto $scheme;<br><br>      proxy_pass http:<span class="hljs-regexp">//</span>vaultwarden-default;<br>    &#125;<br><br>    <span class="hljs-comment"># Optionally add extra authentication besides the ADMIN_TOKEN</span><br>    <span class="hljs-comment"># Remove the comments below `#` and create the htpasswd_file to have it active</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#location /admin &#123;</span><br>    <span class="hljs-comment">#  # See: https://docs.nginx.com/nginx/admin-guide/security-controls/configuring-http-basic-authentication/</span><br>    <span class="hljs-comment">#  auth_basic &quot;Private&quot;;</span><br>    <span class="hljs-comment">#  auth_basic_user_file /path/to/htpasswd_file;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#  proxy_http_version 1.1;</span><br>    <span class="hljs-comment">#  proxy_set_header Upgrade $http_upgrade;</span><br>    <span class="hljs-comment">#  proxy_set_header Connection $connection_upgrade;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#  proxy_set_header Host $host;</span><br>    <span class="hljs-comment">#  proxy_set_header X-Real-IP $remote_addr;</span><br>    <span class="hljs-comment">#  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br>    <span class="hljs-comment">#  proxy_set_header X-Forwarded-Proto $scheme;</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment">#  proxy_pass http://vaultwarden-default;</span><br>    <span class="hljs-comment">#&#125;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>5.测试登录</strong><br>使用客户端或网页端测试功能是否正常</p><p><strong>6.禁止他人注册</strong><br>由于这个bitwarden服务器是供个人使用，我们在注册完账号后，要关闭注册功能，防止他人注册。</p><h4 id="先停止并删除容器"><a href="#先停止并删除容器" class="headerlink" title="先停止并删除容器"></a>先停止并删除容器</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">docker stop vaultwarden <br>docker rm vaultwarden<br></code></pre></td></tr></table></figure><h4 id="设置环境变量不允许注册用户-e-SIGNUPS-ALLOWED-false，再启动容器"><a href="#设置环境变量不允许注册用户-e-SIGNUPS-ALLOWED-false，再启动容器" class="headerlink" title="设置环境变量不允许注册用户-e SIGNUPS_ALLOWED&#x3D;false，再启动容器"></a>设置环境变量不允许注册用户-e SIGNUPS_ALLOWED&#x3D;false，再启动容器</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -d --name vaultwarden -v /vw-data/:/data/ -p 8080:80 -e SIGNUPS_ALLOWED=<span class="hljs-literal">false</span> vaultwarden/server:latest</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH免密登录配置</title>
    <link href="/2023/11/13/ssh-settings/"/>
    <url>/2023/11/13/ssh-settings/</url>
    
    <content type="html"><![CDATA[<p><strong>1.生成密钥</strong><br>在终端执行下列命令<code>ssh-keygen -t rsa -C &quot;备注信息&quot;</code>，按提示进行操作</p><p><strong>2.将生成的公钥文件复制到服务器上</strong></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust">cd .ssh<br>touch authorized_keys               <span class="hljs-punctuation">-&gt;</span>如果ssh中存在此文件则省略此步骤<br>cat id_rsa.<span class="hljs-keyword">pub</span> &gt;&gt; authorized_keys   <span class="hljs-punctuation">-&gt;</span> 将id_rsa.<span class="hljs-keyword">pub</span>的内容追加到authorized_keys<br></code></pre></td></tr></table></figure><p><strong>3.修改配置文件</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br><br>RSAAuthentication <span class="hljs-built_in">yes</span><br>PubkeyAuthentication <span class="hljs-built_in">yes</span><br><span class="hljs-comment"># The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2</span><br><span class="hljs-comment"># but this is overridden so installations will only check .ssh/authorized_keys</span><br>AuthorizedKeysFile      .ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>这里有一点很重要，在你配置密钥登录成功之前，千万不要太自信将PasswordAuthentication 设置no，否则你密钥登录不了，然后又禁止密码登录，就悲剧了。在密钥登录设置成功之后，可以将PasswordAuthentication 设置为no，禁用密码登录了，比较安全。</p><p><strong>4.登录测试</strong><br>完成上述步骤后，就能够登录到远程主机而不会被提示输入密码，测试口令如下：<code>ssh remote_username@server_ip_address</code></p><p><a href="https://www.cnblogs.com/niunafei/p/12635233.html">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare WARP packages</title>
    <link href="/2023/10/27/cloudflare-warp-packages/"/>
    <url>/2023/10/27/cloudflare-warp-packages/</url>
    
    <content type="html"><![CDATA[<p>Cloudflare’s client-side software can be installed on Linux with package managers APT or YUM by following these instructions. However, keep in mind that not all packages may support all operating systems or architectures and that you can check a specific package’s page (linked from the homepage) to see what’s available. We generally support modern versions of the following distributions:</p><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>The supported releases are:<br>Jammy (22.04)<br>Focal (20.04)<br>Bionic (18.04)<br>Xenial (16.04)</p><h1 id="Add-cloudflare-gpg-key"><a href="#Add-cloudflare-gpg-key" class="headerlink" title="Add cloudflare gpg key"></a>Add cloudflare gpg key</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">curl https://pkg.cloudflareclient.com/pubkey.gpg | sudo gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg<br></code></pre></td></tr></table></figure><h1 id="Add-this-repo-to-your-apt-repositories"><a href="#Add-this-repo-to-your-apt-repositories" class="headerlink" title="Add this repo to your apt repositories"></a>Add this repo to your apt repositories</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">echo &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ $(lsb_release -cs) main&quot; | sudo tee /etc/apt/sources.list.d/cloudflare-client.list<br></code></pre></td></tr></table></figure><h1 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h1><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">sudo apt-get update &amp;&amp; sudo apt-get install cloudflare-warp<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Internet</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Internet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git常用命令</title>
    <link href="/2023/10/16/git/"/>
    <url>/2023/10/16/git/</url>
    
    <content type="html"><![CDATA[<h2 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h2><p>创建一个新的 git 版本库。这个版本库的配置、存储等信息会被保存到.git 文件夹中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 初始化当前项目</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git init</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 新建一个目录，将其初始化为Git代码库</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git init [project-name]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 在指定目录创建一个空的 Git 仓库。运行这个命令会创建一个名为 directory，只包含 .git 子目录的空目录。</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git init --bare &lt;directory&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 下载一个项目和它的整个代码历史</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 这个命令就是将一个版本库拷贝到另一个目录中，同时也将分支都拷贝到新的版本库中。这样就可以在新的版本库中提交到远程分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">clone</span> [url]</span><br></code></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>更改设置。可以是版本库的设置，也可以是系统的或全局的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 显示当前的Git配置</span><br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">list</span><br><br><span class="hljs-comment"># 编辑Git配置文件</span><br><span class="hljs-variable">$ git config </span>-e [--<span class="hljs-keyword">global</span>]<br><br><span class="hljs-comment"># 输出、设置基本的全局变量</span><br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> user.email<br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> user.name<br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> user.email <span class="hljs-string">&quot;MyEmail@gmail.com&quot;</span><br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> user.name <span class="hljs-string">&quot;My Name&quot;</span><br><br><span class="hljs-comment"># 定义当前用户所有提交使用的作者邮箱。</span><br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> alias.&lt;alias-name&gt; &lt;git-command&gt;<br><br><span class="hljs-comment"># 为Git命令创建一个快捷方式（别名）。</span><br><span class="hljs-variable">$ git config </span>--system core.editor &lt;editor&gt;<br></code></pre></td></tr></table></figure><h2 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h2><p>git 内置了对命令非常详细的解释，可以供我们快速查阅</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查找可用命令</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">help</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查找所有可用命令</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">help</span> -a</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 在文档当中查找特定的命令</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> git <span class="hljs-built_in">help</span> &lt;命令&gt;</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">help</span> add</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">help</span> commit</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">help</span> init</span><br></code></pre></td></tr></table></figure><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>显示索引文件（也就是当前工作空间）和当前的头指针指向的提交的不同</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示分支，未跟踪文件，更改和其他不同</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git status</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看其他的git status的用法</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">help</span> status</span><br></code></pre></td></tr></table></figure><h2 id="信息"><a href="#信息" class="headerlink" title="信息"></a>信息</h2><p>获取某些文件，某些分支，某次提交等 git 信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示commit历史，以及每次commit发生变更的文件</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 搜索提交历史，根据关键词</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> -S [keyword]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某个commit之后的所有变动，每个commit占据一行</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某个commit之后的所有变动，其<span class="hljs-string">&quot;提交说明&quot;</span>必须符合搜索条件</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> [tag] HEAD --grep feature</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某个文件的版本历史，包括文件改名</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> --follow [file]$ git whatchanged [file]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示指定文件相关的每一次diff</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> -p [file]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示过去5次提交</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> -5 --pretty --oneline</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示所有提交过的用户，按提交次数排序</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git shortlog -sn</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示指定文件是什么人在什么时间修改过</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git blame [file]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示暂存区和工作区的差异</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示暂存区和上一个commit的差异</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff --cached [file]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示工作区与当前分支最新commit之间的差异</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff HEAD</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示两次提交之间的差异</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff [first-branch]...[second-branch]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示今天你写了多少行代码</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff --shortstat <span class="hljs-string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 比较暂存区和版本库差异</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff --staged</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 比较暂存区和版本库差异</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff --cached</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 仅仅比较统计信息</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git diff --<span class="hljs-built_in">stat</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某次提交的元数据和内容变化</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git show [commit]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某次提交发生变化的文件</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git show --name-only [commit]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某次提交时，某个文件的内容</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git show [commit]:[filename]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示当前分支的最近几次提交</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git reflog</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看远程分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git br -r</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 创建新的分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git br &lt;new_branch&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看各个分支最后提交信息</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git br -v</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看已经被合并到当前分支的分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git br --merged</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看尚未被合并到当前分支的分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git br --no-merged</span><br></code></pre></td></tr></table></figure><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>添加文件到当前工作空间中。如果你不使用 <code>git add</code> 将文件添加进去，那么这些文件也不会添加到之后的提交之中</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># 添加一个文件</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> test.js</span><br><br><span class="hljs-comment"># 添加一个子目录中的文件</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> /path/to/file/test.js</span><br><br><span class="hljs-comment"># 支持正则表达式</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> ./*.js</span><br><br><span class="hljs-comment"># 添加指定文件到暂存区</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> [file1] [file2] ...</span><br><br><span class="hljs-comment"># 添加指定目录到暂存区，包括子目录</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> [<span class="hljs-built_in">dir</span>]</span><br><br><span class="hljs-comment"># 添加当前目录的所有文件到暂存区</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> .</span><br><br><span class="hljs-comment"># 添加每个变化前，都会要求确认</span><br><span class="hljs-comment"># 对于同一个文件的多处变化，可以实现分次提交</span><br>$ git <span class="hljs-keyword">add</span><span class="language-bash"> -p</span><br></code></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>rm 和上面的 add 命令相反，从工作空间中去掉某个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 移除 HelloWorld.js</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">rm</span> HelloWorld.js</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 移除子目录中的文件</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">rm</span> /pather/to/the/file/HelloWorld.js</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 删除工作区文件，并且将这次删除放入暂存区</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">rm</span> [file1] [file2] ...</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 停止追踪指定文件，但该文件会保留在工作区</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">rm</span> --cached [file]</span><br></code></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>管理分支，可以通过下列命令对分支进行增删改查切换等</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 查看所有的分支和远程分支</span><br><span class="hljs-variable">$ git branch </span>-a<br><br><span class="hljs-comment"># 创建一个新的分支</span><br><span class="hljs-variable">$ git branch </span>[branch-name]<br><br><span class="hljs-comment"># 重命名分支</span><br><span class="hljs-comment"># git branch -m &lt;旧名称&gt; &lt;新名称&gt;</span><br><span class="hljs-variable">$ git branch </span>-m [branch-name] [<span class="hljs-keyword">new</span>-branch-name]<br><br><span class="hljs-comment"># 编辑分支的介绍</span><br><span class="hljs-variable">$ git branch </span>[branch-name] --edit-description<br><br><span class="hljs-comment"># 列出所有本地分支</span><br><span class="hljs-variable">$ git branch</span><br><br><span class="hljs-comment"># 列出所有远程分支</span><br><span class="hljs-variable">$ git branch </span>-r<br><br><span class="hljs-comment"># 新建一个分支，但依然停留在当前分支</span><br><span class="hljs-variable">$ git branch </span>[branch-name]<br><br><span class="hljs-comment"># 新建一个分支，并切换到该分支</span><br><span class="hljs-variable">$ git checkout </span>-b [branch]<br><br><span class="hljs-comment"># 新建一个分支，指向指定commit</span><br><span class="hljs-variable">$ git branch </span>[branch] [commit]<br><br><span class="hljs-comment"># 新建一个分支，与指定的远程分支建立追踪关系</span><br><span class="hljs-variable">$ git branch </span>--track [branch] [remote-branch]<br><br><span class="hljs-comment"># 切换到指定分支，并更新工作区</span><br><span class="hljs-variable">$ git checkout </span>[branch-name]<br><br><span class="hljs-comment"># 切换到上一个分支</span><br><span class="hljs-variable">$ git checkout </span>-<br><br><span class="hljs-comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="hljs-variable">$ git branch </span>--set-upstream [branch] [remote-branch]<br><br><span class="hljs-comment"># 合并指定分支到当前分支</span><br><span class="hljs-variable">$ git merge </span>[branch]<br><br><span class="hljs-comment"># 选择一个commit，合并进当前分支</span><br><span class="hljs-variable">$ git cherry</span>-pick [commit]<br><br><span class="hljs-comment"># 删除分支</span><br><span class="hljs-variable">$ git branch </span>-d [branch-name]<br><br><span class="hljs-comment"># 删除远程分支</span><br><span class="hljs-variable">$ git push origin </span>--delete [branch-name]<br><span class="hljs-variable">$ git branch </span>-dr [remote/branch]<br><br><span class="hljs-comment"># 切换到某个分支</span><br><span class="hljs-variable">$ git co </span>&lt;branch&gt;<br><br><span class="hljs-comment"># 创建新的分支，并且切换过去</span><br><span class="hljs-variable">$ git co </span>-b &lt;new_branch&gt;<br><br><span class="hljs-comment"># 基于branch创建新的new_branch</span><br><span class="hljs-variable">$ git co </span>-b &lt;new_branch&gt; &lt;branch&gt;<br><br><span class="hljs-comment"># 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除</span><br><span class="hljs-variable">$ git co</span> <span class="hljs-variable">$id</span><br><br><span class="hljs-comment"># 把某次历史提交记录checkout出来，创建成一个分支</span><br><span class="hljs-variable">$ git co</span> <span class="hljs-variable">$id </span>-b &lt;new_branch&gt;<br><br><span class="hljs-comment"># 删除某个分支</span><br><span class="hljs-variable">$ git br </span>-d &lt;branch&gt;<br><br><span class="hljs-comment"># 强制删除某个分支 (未被合并的分支被删除的时候需要强制)</span><br><span class="hljs-variable">$ git br </span>-D &lt;branch&gt;<br></code></pre></td></tr></table></figure><h2 id="检出"><a href="#检出" class="headerlink" title="检出"></a>检出</h2><p>将当前工作空间更新到索引所标识的或者某一特定的工作空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 检出一个版本库，默认将更新到master分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git checkout</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 检出到一个特定的分支</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git checkout branchName</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 新建一个分支，并且切换过去，相当于<span class="hljs-string">&quot;git branch &lt;名字&gt;; git checkout &lt;名字&gt;&quot;</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git checkout -b newBranch</span><br></code></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><p>远程同步的远端分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 下载远程仓库的所有变动</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git fetch [remote]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示所有远程仓库</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote -v</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某个远程仓库的信息</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote show [remote]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 增加一个新的远程仓库，并命名</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote add [shortname] [url]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看远程服务器地址和仓库名称</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote -v</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 添加远程仓库地址</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote add origin git@ github:xxx/xxx.git</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 设置远程仓库地址(用于修改远程仓库地址)</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote set-url origin git@ github.com:xxx/xxx.git</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 删除远程仓库</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git remote <span class="hljs-built_in">rm</span> &lt;repository&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 上传本地指定分支到远程仓库</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 把本地的分支更新到远端origin的master分支上</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> git push &lt;远端&gt; &lt;分支&gt;</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> git push 相于 git push origin master</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git push [remote] [branch]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 强行推送当前分支到远程仓库，即使有冲突</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git push [remote] --force</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 推送所有分支到远程仓库</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git push [remote] --all</span><br></code></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 恢复暂存区的指定文件到工作区</span><br><span class="hljs-variable">$ </span>git checkout [file]<br><br><span class="hljs-comment"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="hljs-variable">$ </span>git checkout [commit] [file]<br><br><span class="hljs-comment"># 恢复暂存区的所有文件到工作区</span><br><span class="hljs-variable">$ </span>git checkout .<br><br><span class="hljs-comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="hljs-variable">$ </span>git reset [file]<br><br><span class="hljs-comment"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="hljs-variable">$ </span>git reset --hard<br><br><span class="hljs-comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="hljs-variable">$ </span>git reset [commit]<br><br><span class="hljs-comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="hljs-variable">$ </span>git reset --hard [commit]<br><br><span class="hljs-comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="hljs-variable">$ </span>git reset --keep [commit]<br><br><span class="hljs-comment"># 新建一个commit，用来撤销指定commit</span><br><span class="hljs-comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="hljs-variable">$ </span>git revert [commit]<br><br><span class="hljs-comment"># 恢复最后一次提交的状态</span><br><span class="hljs-variable">$ </span>git revert HEAD<br><br><span class="hljs-comment"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="hljs-variable">$ </span>git stash<span class="hljs-variable">$ </span>git stash pop<br><br><span class="hljs-comment"># 列所有stash</span><br><span class="hljs-variable">$ </span>git stash list<br><br><span class="hljs-comment"># 恢复暂存的内容</span><br><span class="hljs-variable">$ </span>git stash apply<br><br><span class="hljs-comment"># 删除暂存区</span><br><span class="hljs-variable">$ </span>git stash drop<br></code></pre></td></tr></table></figure><h2 id="commit"><a href="#commit" class="headerlink" title="commit"></a>commit</h2><p>将当前索引的更改保存为一个新的提交，这个提交包括用户做出的更改与信息</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-comment"># 提交暂存区到仓库区附带提交信息</span><br><span class="hljs-variable">$ </span>git commit -m [message]<br><br><span class="hljs-comment"># 提交暂存区的指定文件到仓库区</span><br><span class="hljs-variable">$ </span>git commit [file1] [file2] ... -m [message]<br><br><span class="hljs-comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="hljs-variable">$ </span>git commit -a<br><br><span class="hljs-comment"># 提交时显示所有diff信息</span><br><span class="hljs-variable">$ </span>git commit -v<br><br><span class="hljs-comment"># 使用一次新的commit，替代上一次提交</span><br><span class="hljs-comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="hljs-variable">$ </span>git commit --amend -m [message]<br><br><span class="hljs-comment"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="hljs-variable">$ </span>git commit --amend [file1] [file2] ...<br></code></pre></td></tr></table></figure><h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><p>显示当前工作空间和提交的不同</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># 显示工作目录和索引的不同</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span><br><br><span class="hljs-comment"># 显示索引和最近一次提交的不同</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> <span class="hljs-literal">--cached</span><br><br><span class="hljs-comment"># 显示工作目录和最近一次提交的不同</span><br><span class="hljs-variable">$</span> git <span class="hljs-built_in">diff</span> HEAD<br></code></pre></td></tr></table></figure><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>可以在版本库中快速查找</p><p>可选配置：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment"># 感谢Travis Jeffery提供的以下用法：</span><br><span class="hljs-comment"># 在搜索结果中显示行号</span><br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> grep.lineNumber <span class="hljs-literal">true</span><br><br><span class="hljs-comment"># 是搜索结果可读性更好</span><br><span class="hljs-variable">$ git config </span>--<span class="hljs-keyword">global</span> alias.g <span class="hljs-string">&quot;grep --break --heading --line-number&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"># 在所有的java中查找variableName$ git <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;variableName&#x27;</span> -- <span class="hljs-string">&#x27;*.java&#x27;</span><br># 搜索包含 <span class="hljs-string">&quot;arrayListName&quot;</span> 和, <span class="hljs-string">&quot;add&quot;</span> 或 <span class="hljs-string">&quot;remove&quot;</span> 的所有行<br>$ git <span class="hljs-keyword">grep</span> -<span class="hljs-keyword">e</span> <span class="hljs-string">&#x27;arrayListName&#x27;</span> --<span class="hljs-built_in">and</span> \( -<span class="hljs-keyword">e</span> <span class="hljs-built_in">add</span> -<span class="hljs-keyword">e</span> <span class="hljs-built_in">remove</span> \)<br></code></pre></td></tr></table></figure><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><p>显示这个版本库的所有提交</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示所有提交</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 显示某几条提交信息</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> -n 10</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 仅显示合并提交</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> --merges</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看该文件每次提交记录</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> &lt;file&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看每次详细修改内容的diff</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> -p &lt;file&gt;</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看最近两次详细修改内容的diff</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> -p -2</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看提交统计信息</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">log</span> --<span class="hljs-built_in">stat</span></span><br></code></pre></td></tr></table></figure><h2 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h2><p>合并就是将外部的提交合并到自己的分支中</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># 将其他分支合并到当前分支</span><br>$ git <span class="hljs-built_in">merge</span> branchName<br><br><span class="hljs-comment"># 在合并时创建一个新的合并后的提交</span><br><span class="hljs-comment"># 不要 Fast-Foward 合并，这样可以生成 merge 提交</span><br>$ git <span class="hljs-built_in">merge</span> <span class="hljs-comment">--no-ff branchName</span><br></code></pre></td></tr></table></figure><h2 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h2><p>重命名或移动一个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 重命名</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">mv</span> test.js test2.js</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 移动</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">mv</span> test.js ./new/path/test.js</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 改名文件，并且将这个改名放入暂存区</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">mv</span> [file-original] [file-renamed]</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 强制重命名或移动<span class="hljs-comment"># 这个文件已经存在，将要覆盖掉</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git <span class="hljs-built_in">mv</span> -f myFile existingFile</span><br></code></pre></td></tr></table></figure><h2 id="tag"><a href="#tag" class="headerlink" title="tag"></a>tag</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 列出所有tag</span><br>$ git <span class="hljs-keyword">tag</span><br><br><span class="hljs-title"># 新建一个tag</span>在当前commit<br>$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>]<br><br><span class="hljs-comment"># 新建一个tag在指定commit</span><br>$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">[tag</span>] [commit]<br><br><span class="hljs-comment"># 删除本地tag</span><br>$ git <span class="hljs-keyword">tag</span> <span class="hljs-title">-d</span> [<span class="hljs-keyword">tag</span>]<br><br><span class="hljs-comment"># 删除远程tag</span><br>$ git push origin :refs/tags/[tagName]<br><br><span class="hljs-comment"># 查看tag信息</span><br>$ git show [<span class="hljs-keyword">tag</span>]<br><br><span class="hljs-comment"># 提交指定tag</span><br>$ git push [remote] [<span class="hljs-keyword">tag</span>]<br><br><span class="hljs-comment"># 提交所有tag$ git push [remote] --tags</span><br><span class="hljs-comment"># 新建一个分支，指向某个tag</span><br>$ git checkout -b [branch] [<span class="hljs-keyword">tag</span>]<br></code></pre></td></tr></table></figure><h2 id="pull"><a href="#pull" class="headerlink" title="pull"></a>pull</h2><p>从远端版本库合并到当前分支</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 从远端origin的master分支更新版本库</span><br><span class="hljs-comment"># git pull &lt;远端&gt; &lt;分支&gt;</span><br>$ git pull origin <span class="hljs-keyword">master</span><br><br><span class="hljs-title"># 抓取远程仓库所有分支更新并合并到本地，不要快进合并</span><br><span class="hljs-title">$</span> git pull --no-ff<br></code></pre></td></tr></table></figure><h2 id="ci"><a href="#ci" class="headerlink" title="ci"></a>ci</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stata">$ git <span class="hljs-keyword">ci</span> &lt;<span class="hljs-keyword">file</span>&gt;<br>$ git <span class="hljs-keyword">ci</span> .<br># 将git add, git <span class="hljs-keyword">rm</span>和git <span class="hljs-keyword">ci</span>等操作都合并在一起做<br>$ git <span class="hljs-keyword">ci</span> -a$ git <span class="hljs-keyword">ci</span> -am <span class="hljs-string">&quot;some comments&quot;</span><br># 修改最后一次提交记录<br>$ git <span class="hljs-keyword">ci</span> --amend<br></code></pre></td></tr></table></figure><h2 id="rebase-谨慎使用"><a href="#rebase-谨慎使用" class="headerlink" title="rebase (谨慎使用)"></a>rebase (谨慎使用)</h2><p>将一个分支上所有的提交历史都应用到另一个分支上<em>不要在一个已经公开的远端分支上使用 rebase</em>.</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 将experimentBranch应用到master上面</span><br><span class="hljs-comment"># git rebase &lt;basebranch&gt; &lt;topicbranch&gt;</span><br>$ git rebase <span class="hljs-keyword">master</span> <span class="hljs-title">experimentBranch</span><br></code></pre></td></tr></table></figure><h2 id="reset-谨慎使用"><a href="#reset-谨慎使用" class="headerlink" title="reset (谨慎使用)"></a>reset (谨慎使用)</h2><p>将当前的头指针复位到一个特定的状态。这样可以使你撤销 merge、pull、commits、add 等 这是个很强大的命令，但是在使用时一定要清楚其所产生的后果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 使 staging 区域恢复到上次提交时的状态，不改变现在的工作目录</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git reset</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 使 staging 区域恢复到上次提交时的状态，覆盖现在的工作目录</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git reset --hard</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 将当前分支恢复到某次提交，不改变现在的工作目录</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 在工作目录中所有的改变仍然存在</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git reset dha78as</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 将当前分支恢复到某次提交，覆盖现在的工作目录<span class="hljs-comment"># 并且删除所有未提交的改变和指定提交之后的所有提交</span></span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git reset --hard dha78as</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"> 生成一个可供发布的压缩包</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git archive</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 打补丁</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git apply ../sync.patch</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 测试补丁能否成功</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git apply --check ../sync.patch</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"> 查看Git的版本</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash"> git --version</span><br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><p>常用 Git 命令清单: <a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html">https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html</a></p></li><li><p>Linux、MySQL、Nginx、PHP、Git、Shell 等笔记: <a href="https://github.com/guanguans/notes">https://github.com/guanguans/notes</a></p></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux JDK环境配置</title>
    <link href="/2023/10/16/ubuntu-jdk-environment/"/>
    <url>/2023/10/16/ubuntu-jdk-environment/</url>
    
    <content type="html"><![CDATA[<p>1.在&#x2F;etc&#x2F;profile文件最后添加以下内容</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#set oracle jdk environment</span><br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JAVA_HOME</span>=/opt/jdk/jdk1.8.0_171/<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">JRE_HOME</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/jre  <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">CLASSPATH</span>=.:$&#123;JAVA_HOME&#125;/lib:<span class="hljs-variable">$&#123;JRE_HOME&#125;</span>/lib  <br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$&#123;JAVA_HOME&#125;</span>/bin:$PATH <br></code></pre></td></tr></table></figure><p>JAVA_HOME设置为JDK解压目录<br>2.执行<code>source /etc/profile</code> 重新加载配置</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>下载旧版本JDK</title>
    <link href="/2023/10/16/jdk-oldversion/"/>
    <url>/2023/10/16/jdk-oldversion/</url>
    
    <content type="html"><![CDATA[<p>一、打开Oracle Java下载<a href="https://www.oracle.com/cn/java/technologies/downloads/">链接</a><br>二、选择“Java archive”<br><img src="https://pic.imgdb.cn/item/652d2a04c458853aefd77564.jpg"><br>三、网页下移，找到需要的版本，例如jdk8<br><img src="https://pic.imgdb.cn/item/652d2a04c458853aefd775e9.jpg"><br>四、网页下移，找到需要的版本，选择对应系统版本下载<br><img src="https://pic.imgdb.cn/item/652d2a04c458853aefd7764e.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>平行时空遇见你</title>
    <link href="/2023/10/09/letter/"/>
    <url>/2023/10/09/letter/</url>
    
    <content type="html"><![CDATA[<p>未来的夫人:<br>&emsp;&emsp;最近还好吗？见字如晤，恰逢中秋佳节，归乡一趟，所见所闻，颇有感慨。乡音未改，却道物是人非。虽未能见汝，但心中甚是惦念。时常在梦中与你相会，谈笑风生，互诉衷肠。与卿相识，实为三生有幸。然每逢深夜，辗转反侧，感慨良多，观吾过往，悠悠二十五载，几近无为。<br>&emsp;&emsp;青春如白驹过隙，二十岁以后的生活仿佛按了加速键，白天好似一具躯壳，夜晚只剩孤独的灵魂独自承受噬心之痛。也终变成了不说，无人可说。<br>&emsp;&emsp;好想与你相见，看看故事的最终答案是什么。至2023年，已然到了结婚的年纪。身边好友同事都陆续结婚生子，父母的皱纹也平添了许多，每一缕青丝白发似乎都在告诉我而立之年将至。想想自己所经历的这几年，每一件事都历历在目。可往往事与愿违，身体状态不如之前，感情之路颇为不顺。快餐式的爱情我为之不屑，三观一致臭味相投才是良配。或许我也期盼有人的突然出现，但又怕那人的突然出现。怕自己的不完美，也怕伤害到别人，这大抵就是我的心事。也望在我正青春时，倾尽所有，与人相爱，共守一生。<br>&emsp;&emsp;好了，夜深了。今天杂乱无章的信就写到这里，很想真正依偎在你怀里，吐露心声，如果未来的你收到，那也算与你共度了此刻，这便是我最幸福的时刻。</p>]]></content>
    
    
    <categories>
      
      <category>随记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>letter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用装机软件下载</title>
    <link href="/2023/10/01/application/"/>
    <url>/2023/10/01/application/</url>
    
    <content type="html"><![CDATA[<h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a><strong>Windows</strong></h3><h4 id="聊天软件"><a href="#聊天软件" class="headerlink" title="聊天软件"></a>聊天软件</h4><table><thead><tr><th align="center"><a href="https://im.qq.com/index/#downloadAnchor">QQ</a></th><th align="center"><a href="https://weixin.qq.com/">微信</a></th><th align="center"><a href="https://im.qq.com/index/#downloadAnchor">TIM</a></th></tr></thead></table><h4 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h4><p><a href=""></a><a href=""></a><a href=""></a><a href=""></a></p><table><thead><tr><th align="center"><a href="https://www.google.cn/chrome/index.html">Google</a></th><th align="center"><a href="https://www.mozilla.org/">Firefox</a></th><th align="center"><a href="https://www.microsoft.com/zh-cn/edge/welcome?exp=e155&form=MT00A8">Edge</a></th><th align="center"><a href="https://browser.360.cn/ee/index.html?from=mac">360极速浏览器</a></th></tr></thead></table><h4 id="其它软件"><a href="#其它软件" class="headerlink" title="其它软件"></a>其它软件</h4><table><thead><tr><th align="center"><a href="https://www.wps.cn/">WPS</a></th><th align="center"><a href="https://www.huorong.cn/">火绒安全</a></th><th align="center"><a href="https://7-zip.org/">7-Zip</a></th><th align="center"><a href="https://www.360totalsecurity.com/360zip/">360压缩-国际版</a></th><th align="center"><a href="https://qq.pinyin.cn/">QQ输入法</a></th></tr></thead><tbody><tr><td align="center"><a href="https://dl.xunlei.com/">迅雷</a></td><td align="center"><a href="https://github.com/kkkgo/LTSC-Add-MicrosoftStore/archive/refs/tags/2019.zip">LTSC-Add-MicrosoftStore</a></td><td align="center"><a href="https://www.voidtools.com/zh-cn/">Everything</a></td><td align="center"><a href="https://zh.snipaste.com/">Snipaste</a></td><td align="center"><a href="https://www.chuyu.me/">Dism++</a></td></tr><tr><td align="center"><a href="https://geekuninstaller.com/">Geek Uninstaller</a></td><td align="center"><a href="http://www.uderzo.it/main_products/space_sniffer/">SpaceSniffer</a></td><td align="center"><a href="https://www.videolan.org/vlc/">VLC</a></td><td align="center"><a href="https://pan.baidu.com/">百度网盘</a></td><td align="center"><a href="https://www.aliyundrive.com/">阿里云盘</a></td></tr><tr><td align="center"><a href="https://learn.microsoft.com/zh-cn/windows/powertoys/">PowerToys</a></td><td align="center"><a href="https://gitee.com/cxasm/notepad--/releases/tag/v2.8">notepad—</a></td><td align="center"><a href="https://anytxt.net/">AnyTXT Searcher</a></td><td align="center"><a href="https://easinote.seewo.com/">希沃白板</a></td><td align="center"><a href="https://www.microsoft.com/zh-cn/bing/bing-wallpaper">必应壁纸</a></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>Application</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Application</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用PE下载</title>
    <link href="/2023/10/01/PE-ISO/"/>
    <url>/2023/10/01/PE-ISO/</url>
    
    <content type="html"><![CDATA[<h2 id="WEPE"><a href="#WEPE" class="headerlink" title="WEPE"></a>WEPE</h2><p>版本：V2.3<br>下载链接：<a href="https://mirrors.sdu.edu.cn/wepe/WePE_64_V2.3.exe">64位下载–山东大学镜像站</a></p><p>版本：V2.1<br>下载链接：<a href="https://mirrors.sdu.edu.cn/wepe/WePE_64_V2.1.exe">64位下载–山东大学镜像站</a></p><p>版本：V1.3<br>下载链接：<a href="https://mirrors.sdu.edu.cn/wepe/WePE_64_V1.3.exe">64位下载–山东大学镜像站</a></p><h2 id="FirPE"><a href="#FirPE" class="headerlink" title="FirPE"></a>FirPE</h2><p>下载链接：<a href="https://www.aliyundrive.com/s/PrQGSRVkeHf">阿里云盘</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>ISO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>常用Windows操作系统镜像下载地址</title>
    <link href="/2023/10/01/Windows-ISO/"/>
    <url>/2023/10/01/Windows-ISO/</url>
    
    <content type="html"><![CDATA[<p><strong>Windows 11</strong></p><hr><p>版本：Windows 11 (consumer editions), version 24H2 (x64) - DVD (Chinese-Simplified)</p><p>校验信息：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">文件：zh-c<span class="hljs-symbol">n_windows_11</span>_co<span class="hljs-symbol">nsumer_editions_version_24</span>h<span class="hljs-number">2</span>_x<span class="hljs-number">64</span>_dvd_bfc<span class="hljs-number">0</span>d<span class="hljs-number">79</span>b.iso<br>大小：<span class="hljs-number">5.43</span>GB<br>MD<span class="hljs-number">5</span>：A<span class="hljs-number">0</span>EF<span class="hljs-number">4099</span>B<span class="hljs-number">38</span>E<span class="hljs-number">445</span>BB<span class="hljs-number">7</span>EE<span class="hljs-number">62</span>C<span class="hljs-number">28</span>F<span class="hljs-number">6</span>A<span class="hljs-number">86</span>AA<br>SHA<span class="hljs-number">1</span>：CD<span class="hljs-number">6</span>F<span class="hljs-number">73</span>F<span class="hljs-number">6624</span>C<span class="hljs-number">9</span>FD<span class="hljs-number">06</span>D<span class="hljs-number">1</span>AB<span class="hljs-number">509</span>D<span class="hljs-number">56</span>F<span class="hljs-number">0191</span>CA<span class="hljs-number">1</span>FCA<span class="hljs-number">8</span>E<br>SHA<span class="hljs-number">256</span>：BD<span class="hljs-number">1</span>ECBA<span class="hljs-number">89</span>BC<span class="hljs-number">59</span>B<span class="hljs-number">7</span>B<span class="hljs-number">62</span>EF<span class="hljs-number">12</span>C<span class="hljs-number">88</span>C<span class="hljs-number">4</span>E<span class="hljs-number">70</span>D<span class="hljs-number">456</span>EDAC<span class="hljs-number">10</span>B<span class="hljs-number">969</span>ECB<span class="hljs-number">3299</span>EBD<span class="hljs-number">458</span>B<span class="hljs-number">1</span>F<span class="hljs-number">0</span>FB<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>下载链接：<a href="ed2k://|file|zh-cn_windows_11_consumer_editions_version_24h2_x64_dvd_bfc0d79b.iso|5829044224|EF683BDE621E6BC2A96AB2ACEC626620|/">ed2k</a></p><hr><p>版本：Windows 11 Enterprise LTSC 2024 (x64) - DVD (Chinese-Simplified)<br>校验信息：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">文件：zh-c<span class="hljs-symbol">n_windows_11</span>_e<span class="hljs-symbol">nterprise_ltsc_2024</span>_x<span class="hljs-number">64</span>_dvd_cff<span class="hljs-number">9</span>cd<span class="hljs-number">2</span>d.iso<br>大小：<span class="hljs-number">4.92</span>GB<br>MD<span class="hljs-number">5</span>：<span class="hljs-number">1</span>A<span class="hljs-number">13</span>ADE<span class="hljs-number">0178082432</span>F<span class="hljs-number">90</span>DF<span class="hljs-number">951</span>A<span class="hljs-number">88842</span>F<br>SHA<span class="hljs-number">1</span>：AB<span class="hljs-number">7</span>CD<span class="hljs-number">740</span>E<span class="hljs-number">6</span>CD<span class="hljs-number">495</span>A<span class="hljs-number">69</span>E<span class="hljs-number">3</span>A<span class="hljs-number">90</span>FCD<span class="hljs-number">7</span>FB<span class="hljs-number">56</span>BA<span class="hljs-number">0</span>C<span class="hljs-number">5</span>C<span class="hljs-number">62</span>E<br>SHA<span class="hljs-number">256</span>：<span class="hljs-number">2</span>CB<span class="hljs-number">21649590</span>C<span class="hljs-number">8</span>CF<span class="hljs-number">770</span>CD<span class="hljs-number">93556596</span>DFF<span class="hljs-number">4</span>FD<span class="hljs-number">800</span>F<span class="hljs-number">24</span>D<span class="hljs-number">267</span>A<span class="hljs-number">9</span>BE<span class="hljs-number">9</span>D<span class="hljs-number">9</span>CE<span class="hljs-number">0</span>EE<span class="hljs-number">9</span>E<span class="hljs-number">03</span>F<span class="hljs-number">5</span>AC<br></code></pre></td></tr></table></figure><p>下载链接：<a href="ed2k://%7Cfile%7Czh-cn_windows_11_enterprise_ltsc_2024_x64_dvd_cff9cd2d.iso%7C5287520256%7CD6E4FE0BA5FD8A2F22FC9C0326481791%7C/">ed2k</a></p><hr><p><strong>Windows 10</strong></p><hr><p>版本：Windows 10 (consumer editions), version 22H2 (updated Oct 2024) (x64) - DVD (Chinese-Simplified)<br>校验信息：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">文件：zh-c<span class="hljs-symbol">n_windows_10</span>_co<span class="hljs-symbol">nsumer_editions_version_22</span>h<span class="hljs-number">2</span>_updated_oct_<span class="hljs-number">2024</span>_x<span class="hljs-number">64</span>_dvd_d<span class="hljs-number">0</span>cfb<span class="hljs-number">2</span>e<span class="hljs-number">9.</span>iso<br>大小：<span class="hljs-number">6.67</span>GB<br>MD<span class="hljs-number">5</span>：<span class="hljs-number">79</span>A<span class="hljs-number">7</span>DFB<span class="hljs-number">900</span>B<span class="hljs-number">395000</span>E<span class="hljs-number">83</span>E<span class="hljs-number">9433062982</span>A<br>SHA<span class="hljs-number">1</span>：<span class="hljs-number">7362475</span>FF<span class="hljs-number">1</span>EC<span class="hljs-number">340774425</span>F<span class="hljs-number">89</span>EC<span class="hljs-number">9</span>F<span class="hljs-number">924853697</span>BB<span class="hljs-number">7</span><br>SHA<span class="hljs-number">256</span>：<span class="hljs-number">1</span>DB<span class="hljs-number">6</span>A<span class="hljs-number">58</span>F<span class="hljs-number">941</span>FB<span class="hljs-number">9310</span>D<span class="hljs-number">963</span>CA<span class="hljs-number">8</span>B<span class="hljs-number">1</span>AB<span class="hljs-number">59</span>DD<span class="hljs-number">73846</span>F<span class="hljs-number">6</span>D<span class="hljs-number">9978854843</span>E<span class="hljs-number">6</span>C<span class="hljs-number">2</span>ECCE<span class="hljs-number">10</span>DDFC<br></code></pre></td></tr></table></figure><p>下载链接：<a href="ed2k://%7Cfile%7Czh-cn_windows_10_consumer_editions_version_22h2_updated_oct_2024_x64_dvd_d0cfb2e9.iso%7C7167156224%7CCFF635F6DCD2011100864BDFD3CAF429%7C/">ed2k</a></p><hr><p>版本：Windows 10 Enterprise LTSC 2021 (x64) - DVD (Chinese-Simplified)</p><p>校验信息：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gcode">文件：SW_DVD<span class="hljs-number">9</span>_WI<span class="hljs-symbol">N_ENT_LTSC_2021</span>_<span class="hljs-number">64</span>BIT_Ch<span class="hljs-symbol">nSimp_MLF_X22</span><span class="hljs-number">-84402.</span>ISO<br>大小：<span class="hljs-number">4.7</span>GB<br>MD<span class="hljs-number">5</span>：<span class="hljs-number">2579</span>B<span class="hljs-number">3865</span>C<span class="hljs-number">0591</span>EAD<span class="hljs-number">3</span>A<span class="hljs-number">2</span>B<span class="hljs-number">45</span>AF<span class="hljs-number">3</span>CABEEE<br>SHA<span class="hljs-number">1</span>：C<span class="hljs-number">19</span>D<span class="hljs-number">7</span>DAFBAFEB<span class="hljs-number">26</span>C<span class="hljs-number">36</span>E<span class="hljs-number">31</span>D<span class="hljs-number">97</span>C<span class="hljs-number">465</span>E<span class="hljs-number">87</span>C<span class="hljs-number">7</span>A<span class="hljs-number">6</span>E<span class="hljs-number">8</span>A<span class="hljs-number">4</span>C<br>SHA<span class="hljs-number">256</span>：C<span class="hljs-number">117</span>C<span class="hljs-number">5</span>DDBC<span class="hljs-number">51</span>F<span class="hljs-number">315</span>C<span class="hljs-number">739</span>F<span class="hljs-number">9321</span>D<span class="hljs-number">4907</span>FA<span class="hljs-number">50090</span>BA<span class="hljs-number">7</span>B<span class="hljs-number">48</span>E<span class="hljs-number">7</span>E<span class="hljs-number">9</span>A<span class="hljs-number">2</span>D<span class="hljs-number">173</span>D<span class="hljs-number">49</span>EF<span class="hljs-number">2</span>F<span class="hljs-number">73</span>A<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>下载链接：<a href="ed2k://%7Cfile%7CSW_DVD9_WIN_ENT_LTSC_2021_64BIT_ChnSimp_MLF_X22-84402.ISO%7C5044211712%7C1555B7DCA052B5958EE68DB58A42408D%7C/">ed2k</a> <a href="magnet:?xt=urn:btih:366ADAA52FB3639B17D73718DD5F9E3EE9477B40&dn=SW_DVD9_WIN_ENT_LTSC_2021_64BIT_ChnSimp_MLF_X22-84402.ISO&xl=5044211712">bt</a></p><hr><p>版本：Windows 10 Enterprise LTSC 2019 (x64) - DVD (Chinese-Simplified)</p><p>校验信息：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">文件：cn_windows_<span class="hljs-number">10</span>_enterprise_ltsc_<span class="hljs-number">2019</span>_x<span class="hljs-number">64</span>_dvd_<span class="hljs-number">9</span><span class="hljs-keyword">c</span><span class="hljs-number">09</span>ff<span class="hljs-number">24</span>.iso<br>大小：<span class="hljs-number">4.17</span>GB<br>SHA<span class="hljs-number">1</span>：<span class="hljs-number">24</span>b<span class="hljs-number">59706</span>d<span class="hljs-number">5</span>eded<span class="hljs-number">392423936</span><span class="hljs-keyword">c</span><span class="hljs-number">82</span>ba<span class="hljs-number">5</span>a<span class="hljs-number">83596</span>b<span class="hljs-number">50</span><span class="hljs-keyword">cc</span><br></code></pre></td></tr></table></figure><p>下载链接：<a href="ed2k://%7Cfile%7Ccn_windows_10_enterprise_ltsc_2019_x64_dvd_9c09ff24.iso%7C4478906368%7CE7C526499308841A4A6D116C857DB669%7C/">ed2k</a></p><hr><p><strong>Windows 7</strong></p><hr><p>版本：Windows 7 Ultimate with Service Pack 1 (x64) - DVD (Chinese-Simplified)</p><p>校验信息：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dns">文件：cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso<br>大小：<span class="hljs-number">3</span>.<span class="hljs-number">19</span>GB<br>SHA1：<span class="hljs-number">2</span>CE0B2DB34D76ED3F697CE148CB75<span class="hljs-number">94432405E23</span><br></code></pre></td></tr></table></figure><p>下载链接：<a href="ed2k://%7Cfile%7Ccn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso%7C3420557312%7CB58548681854236C7939003B583A8078%7C/">ed2k</a></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>ISO</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo-分类&amp;标签应用</title>
    <link href="/2023/09/26/hexo-extra/"/>
    <url>/2023/09/26/hexo-extra/</url>
    
    <content type="html"><![CDATA[<blockquote><p>指令解析</p></blockquote><p>根据scaffolds模板下的page文件创建相应的分类或者标签概念</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> xxx<br></code></pre></td></tr></table></figure><p>该指令执行完成会在source下相应生成一个xxx文件夹（内有一个index.md文件）</p><h2 id="1-分类-标签创建"><a href="#1-分类-标签创建" class="headerlink" title="1.分类&amp;标签创建"></a>1.分类&amp;标签创建</h2><h3 id="分类创建"><a href="#分类创建" class="headerlink" title="分类创建"></a>分类创建</h3><blockquote><p>创建分类页面</p></blockquote><p>执行命令创建分类</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> categories<br></code></pre></td></tr></table></figure><p>构建完成：categories&#x2F;index.md对应内容</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> categories<br><span class="hljs-symbol">date:</span> xxxx-xx-xx xx:xx:xx<br></code></pre></td></tr></table></figure><p>修改index.md文件，将页面类型设置为 categories ，主题将自动为这个页面显示所有分类（可根据自身需求配置相关内容）</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> categories<br><span class="hljs-symbol">date:</span> xxxx-xx-xx xx:xx:xx<br><span class="hljs-symbol">type:</span> <span class="hljs-string">&quot;categories&quot;</span><br></code></pre></td></tr></table></figure><h3 id="标签创建"><a href="#标签创建" class="headerlink" title="标签创建"></a>标签创建</h3><blockquote><p>创建标签页面</p></blockquote><p>执行命令创建标签</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">page</span> tags<br></code></pre></td></tr></table></figure><p>构建完成：tags&#x2F;index.md对应内容</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> tags<br><span class="hljs-symbol">date:</span> xxxx-xx-xx xx:xx:xx<br></code></pre></td></tr></table></figure><p>改index.md文件，将页面类型设置为 tags，主题将自动为这个页面显示所有标签（可根据自身需求配置相关内容）</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">title:</span> tags<br><span class="hljs-symbol">date:</span> xxxx-xx-xx xx:xx:xx<br><span class="hljs-symbol">type:</span> <span class="hljs-string">&quot;tags&quot;</span><br></code></pre></td></tr></table></figure><h2 id="2-分类-标签应用"><a href="#2-分类-标签应用" class="headerlink" title="2.分类&amp;标签应用"></a>2.分类&amp;标签应用</h2><h4 id="在文章中配置分类和标签"><a href="#在文章中配置分类和标签" class="headerlink" title="在文章中配置分类和标签"></a>在文章中配置分类和标签</h4><p>​创建一个文章，编辑front-matter，设定相应的分类和标签信息，注意区分分类、标签的层次关系<br>​只有文章支持分类和标签，可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性；而标签没有顺序和层次。</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs subunit">title: 个人博客<br>categories: <br>    - java-note<br>    - base<br><span class="hljs-keyword">tags:</span> <br>    - java<br>    - database<br>date: xxx-xx-xx xx:xx:xx<br>updated: xxx-xx-xx xx:xx:xx<br></code></pre></td></tr></table></figure><p>​ 预览文章内容，显示信息。</p><h4 id="多级分类构建"><a href="#多级分类构建" class="headerlink" title="多级分类构建"></a>多级分类构建</h4><blockquote><p>多级分类构建</p></blockquote><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">categories</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">[java-note, base]</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">[java-note, database]</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">[vue-note]</span><br></code></pre></td></tr></table></figure><p>上述分类为：java-note下有base、database两个子分类，而vue-note没有子分类。</p>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Manjaro安装后基本配置</title>
    <link href="/2023/09/26/Manjaro-settings/"/>
    <url>/2023/09/26/Manjaro-settings/</url>
    
    <content type="html"><![CDATA[<p><strong>1.设置官方镜像源</strong><br><code>$ sudo pacman-mirrors -i -c China -m rank</code><br>输入以上命令后会有弹出框，选择一个国内镜像(推荐中国科技大学的镜像源<a href="https://mirrors.ustc.edu.cn/">https://mirrors.ustc.edu.cn</a>)</p><p><strong>2.升级系统及编辑器</strong><br><code>$ sudo pacman -Syyu &amp;&amp; sudo pacman -S vim</code></p><p><strong>3.添加archlinuxcn源</strong><br><code>$ sudo vim /etc/pacman.conf</code><br>文件底部添加以下几行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[archlinuxcn]</span><br><span class="hljs-attr">SigLevel</span> = Optional TrustedOnly  <br><span class="hljs-attr">Server</span> = https://mirrors.ustc.edu.cn/archlinuxcn/<span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><p>修改文件后，执行以下命令<br><code>$ sudo pacman -Syy &amp;&amp; sudo pacman -S archlinuxcn-keyring</code></p><p><strong>4.安装输入法</strong>(基于 fcitx 的搜狗输入法)<br><code>$ sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</code><br>添加输入法配置文件<br><code>$ vim ~/.xprofile</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">GTK_IM_MODULE</span>=fcitx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">QT_IM_MODULE</span>=fcitx<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">XMODIFIERS</span>=<span class="hljs-string">&quot;@im=fcitx&quot;</span><br></code></pre></td></tr></table></figure><p>重启即可正常使用输入法</p><p>5.安装常用软件(按需安装)<br><code>$ sudo pacman -S deepin.com.qq.office deepin.com.qq.im netease-cloud-music wps-office ttf-wps-fonts yay google-chrome</code><br><code>$ yay -S deepin-wine-wechat</code></p><p>deepin.com.qq.office [QQ]<br>deepin.com.qq.im [TIM]<br>netease-cloud-music [网易云音乐]<br>wps-office [WPS]<br>ttf-wps-fonts [WPS字体]<br>yay [AUR工具]<br>google-chrome [谷歌浏览器]<br>deepin-wine-wechat [微信]</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nginx反向代理及设置访问站点密码</title>
    <link href="/2023/09/26/nginx-settings/"/>
    <url>/2023/09/26/nginx-settings/</url>
    
    <content type="html"><![CDATA[<p>1.在&#x2F;etc&#x2F;nginx&#x2F;conf.d目录下修改站点配置文件,修改完成后重启服务</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br>        server_name <span class="hljs-keyword">admin</span>.service.com;<br>        <span class="hljs-keyword">location</span> / &#123;<br>               proxy_pass http://<span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.123</span>:<span class="hljs-number">8090</span>;<br>               <span class="hljs-keyword">index</span> <span class="hljs-keyword">index</span>.jsp <span class="hljs-keyword">index</span>.html <span class="hljs-keyword">index</span>.htm;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure><p>2.安装访问验证工具</p><p>Ubuntu: <code># apt install apache2-utils</code></p><p>CentOS: <code># yum install httpd-tools</code></p><p>3.设置验证用户名及密码</p><p><code># mkdir -p /usr/local/src/nginx/</code></p><p><code># htpasswd -c /usr/local/src/nginx/passwd admis</code><br>passwd为密码文件，admis为用户名</p><p>4.修改nginx站点配置文件,修改完成后重启nginx服务</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">server &#123;  <br>     listen <span class="hljs-number">80</span>;  <br>     server_name  localhost;  <br>     …….  <br>     <span class="hljs-comment">#新增下面两行  </span><br>     auth_basic <span class="hljs-string">&quot;Please input password&quot;</span>; <span class="hljs-comment">#这里是验证时的提示信息  </span><br>     auth_basic_user_file <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>nginx/passwd;  <br>     location /&#123;  <br>     …….  <br> &#125;<br> &#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Debian10缺少iwlwifi固件无法使用无线网络解决办法</title>
    <link href="/2023/09/26/debian-extra/"/>
    <url>/2023/09/26/debian-extra/</url>
    
    <content type="html"><![CDATA[<p><strong>解决过程：</strong></p><p>1.使用有线网络连接到互联网;</p><p>2.编辑Debian10的软件源配置文件</p><p><code>$ sudo vim /etc/apt/sources.list</code></p><p>将<code>non-free</code>添加到源的后面</p><p>3.更新源</p><p><code>$ sudo apt update</code></p><p>4.安装firmware-iwlwifi包</p><p><code>$ sudo apt install firmware-iwlwifi</code></p><p>5.加载模块</p><p><code>$ sudo modprobe -r iwlwifi</code></p><p><code>$ sudo modprobe iwlwifi</code></p><p><strong>说明：</strong>Debian是一个开源操作系统。因此，在安装Debian的时候，默认只安装自由软件，而非自由软件（non-free）则不会被默认安装。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>owncloud安装后常见配置问题</title>
    <link href="/2023/09/26/owncloud-extra/"/>
    <url>/2023/09/26/owncloud-extra/</url>
    
    <content type="html"><![CDATA[<p>1.PHP 的设置似乎有问题, 无法获取系统环境变量. 使用 getenv(\”PATH\”) 测试时仅返回空结果。</p><p>编辑<code>/etc/php/7.3/fpm/php-fpm.conf</code>配置文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">env[<span class="hljs-variable constant_">PATH</span>] = <span class="hljs-regexp">/usr/local</span><span class="hljs-regexp">/bin:/usr</span><span class="hljs-regexp">/bin:/bin</span><span class="hljs-symbol">:/usr/local/php/bin</span><br></code></pre></td></tr></table></figure><p>将上面的代码粘贴到配置文件的最后一行，重启php7.3-fpm</p><p>2.HTTP 严格传输安全（Strict-Transport-Security）报头未配置到至少“15552000”秒。处于增强安全性考虑，我们推荐按照安全提示启用 HSTS。</p><p>编辑网站的配置文件“vhost.conf”文件找到对应网站的433端口段添加下面代码（保存后重启nginx）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">add_header <span class="hljs-keyword">Strict</span>-Transport-<span class="hljs-keyword">Security</span> &quot;max-age=63072000; includeSubdomains; preload&quot;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Nginx</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ArchLinux安装教程</title>
    <link href="/2023/09/26/Arch-install/"/>
    <url>/2023/09/26/Arch-install/</url>
    
    <content type="html"><![CDATA[<p><strong>一、准备工作</strong></p><p>1.下载arch最新安装镜像;</p><p>2.烧录镜像至U盘（4G或8G）</p><p>Linux:</p><p><code>$ sudo dd bs=4M if=archlinux-*******.iso of=/dev/sdc</code> </p><p>Windows:<br>使用rufus,模式选择dd</p><p><strong>二、启动到live环境</strong></p><p><strong>1.进入装机环境</strong></p><p><strong>2.验证启动模式</strong><br><code># ls /sys/firmware/efi/efivars</code><br>如果目录不为空，说明当前系统是以UEFI模式启动的，如果目录不存在，系统可能以 BIOS或 CSM 模式启动</p><p><strong>3.连接到互联网</strong><br>a.启动dhcp服务<br><code># systemctl start dhcpcd</code><br>b.查看网络连接<br><code># ip a</code><br>c.检查网络连通性<br><code># ping -c 3 www.baidu.com</code></p><p><strong>4.更新系统时间</strong><br><code># timedatectl set-ntp true</code></p><p><strong>5.硬盘分区</strong></p><p><strong>查看硬盘信息</strong><br><code># lsblk</code></p><p><strong>分区示例</strong>(磁盘以sda为例)</p><p><strong>BIOS和MBR</strong></p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>建议大小</th></tr></thead><tbody><tr><td>&#x2F;mnt</td><td>&#x2F;dev&#x2F;sda1</td><td>Linux</td><td>剩余空间</td></tr><tr><td>SWAP</td><td>&#x2F;dev&#x2F;sda2</td><td>Linux swap (交换空间)</td><td>大于 512 MiB</td></tr></tbody></table><p><strong>UEFI with GPT</strong></p><table><thead><tr><th>挂载点</th><th>分区</th><th>分区类型</th><th>建议大小</th></tr></thead><tbody><tr><td>&#x2F;mnt&#x2F;boot&#x2F;efi</td><td>&#x2F;dev&#x2F;sda1</td><td>EFI 系统分区</td><td>260–512 MiB</td></tr><tr><td>&#x2F;mnt</td><td>&#x2F;dev&#x2F;sda2</td><td>Linux x86-64 根目录 (&#x2F;)</td><td>剩余空间</td></tr><tr><td>SWAP</td><td>&#x2F;dev&#x2F;sda3</td><td>Linux swap (交换空间)</td><td>大于 512 MiB</td></tr></tbody></table><ul><li>请使用 cfdisk 或 parted 修改分区表，例如 <code># cfdisk /dev/sda</code></li><li>如果文件系统支持，交换空间也可以设在交换文件上。</li></ul><p><strong>6.格式化分区</strong>(磁盘以sda为例)<br>当分区建立好了，这些分区都需要使用适当的文件系统进行格式化。举例,如果根分区在 &#x2F;dev&#x2F;sda2 上并且会使用 <em>ext4</em> 文件系统，efi分区在&#x2F;dev&#x2F;sda1上，运行：<br><code># mkfs.fat -F32 /dev/sda1</code> efi分区<br><code># mkfs.*ext4* /dev/sda2</code> &#x2F;分区<br>如果您创建了交换分区（例如 &#x2F;dev&#x2F;sda3），使用 mkswap 将其初始化：<br><code># mkswap /dev/sda3</code><br><code># swapon /dev/sda3</code></p><p><strong>7.挂载分区</strong>(磁盘以sda为例)<br>将根分区挂载到 <code>/mnt</code>，例如：<br><code># mount /dev/sda2 /mnt</code><br>创建其他剩余的挂载点（比如 <code>/mnt/boot/efi</code>）并挂载其相应的分区。<br><code># mkdir /mnt/boot/efi -p   # mount /dev/sda1 /mnt/boot/efi</code><br>接下来 genfstab 将会自动检测挂载的文件系统和交换空间。</p><p><strong>三、安装系统</strong></p><p><strong>1.选择镜像</strong><br>文件 <code>/etc/pacman.d/mirrorlist</code> 定义了软件包会从哪个镜像源下载。在 LiveCD 启动的系统上，所有的镜像都被启用，并且在镜像被制作时，我们已经通过他们的同步情况和速度排序。<br>在列表中越前的镜像在下载软件包时有越高的优先权。你可以相应的修改文件 <code>/etc/pacman.d/mirrorlist</code>，并<strong>将地理位置最近的镜像源挪到文件的头部</strong>，同时你也应该考虑一些其他标准。<br>这个文件接下来还会被 <em>pacstrap</em> 拷贝到新系统里，所以请确保设置正确。<br>例：<br><code># vim /etc/pacman.d/mirrorlist</code>  </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Server = https:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/archlinux/</span><span class="hljs-variable">$repo</span><span class="hljs-regexp">/os/</span><span class="hljs-variable">$arch</span><br></code></pre></td></tr></table></figure><p><strong>2.安装必须的软件包</strong><br><code># pacstrap -K /mnt base base-devel linux linux-firmware vim</code></p><p><strong>四、配置系统</strong></p><p><strong>1.Fstab</strong><br>用以下命令生成fstab文件 (用 <code>-U</code> 或 <code>-L</code> 选项设置UUID 或卷标)：<br><code># genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code><br><strong>强烈建议</strong> 在执行完以上命令后，后检查一下生成的 <code>/mnt/etc/fstab</code> 文件是否正确。</p><p><strong>2.Chroot</strong><br>Change root 到新安装的系统：<br><code># arch-chroot /mnt</code></p><p><strong>3.设置时区</strong><br><code># ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code><br><code># hwclock --systohc --localtime</code></p><p><strong>4.本地化</strong><br>本地化的程序要本地化文本，都依赖 Locale，后者明确规定地域、货币、时区日期的格式、字符排列方式和其他本地化标准等等。在下面两个文件设置：<code>locale.gen</code> 与 <code>locale.conf</code>。<br><code>/etc/locale.gen</code> 是一个仅包含注释文档的文本文件。指定您需要的本地化类型，只需移除对应行前面的注释符号（<code>＃</code>）即可，建议选择带 <code>UTF-8</code> 的项：<br><code># vim /etc/locale.gen</code>  </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">en_US</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span>  <br><span class="hljs-attribute">zh_CN</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span>  <br><span class="hljs-attribute">zh_TW</span>.UTF-<span class="hljs-number">8</span> UTF-<span class="hljs-number">8</span><br></code></pre></td></tr></table></figure><p>接着执行 <code>locale-gen</code> 以生成 locale 信息：<br><code># locale-gen</code></p><p><code>/etc/locale.gen</code> 会生成指定的本地化文件。<br>创建 <code>locale.conf</code> 并编辑 <code>LANG</code> 这一变量,比如将系统 locale 设置为 <code>en_US.UTF-8</code>，系统的 Log 就会用英文显示，这样更容易问题的判断和处理。<br><code># echo LANG=en_US.UTF8 &gt; /etc/locale.conf</code><br><strong>警告:</strong> 不推荐在此设置任何中文 locale，会导致 TTY 乱码。</p><p><strong>5.设置网络</strong><br>a.创建 hostname 文件<br><code># vim /etc/hostname</code>  </p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">myhostname</span><br></code></pre></td></tr></table></figure><p>b.添加对应的信息到 hosts:<br><code># vim /etc/hosts</code>  </p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">127.0.0.1</span> localhost  <br>::<span class="hljs-number">1</span> localhost  <br><span class="hljs-number">127.0.1.1</span> myhostname.localdomain myhostname<br></code></pre></td></tr></table></figure><p><strong>6.用户配置</strong><br>a.修改root密码<br><code># passwd root</code><br>b.创建新用户(merlin是新建的用户名)<br><code># useradd -m -G wheel merlin</code><br>c.修改用户密码<br><code># passwd merlin</code><br>d.修改sudo权限<br><code># visudo</code><br>去掉<code># %wheel ALL=(ALL) ALL</code> 前面的注释</p><p><strong>7.其它配置</strong><br>a.<em>有线连接</em><br><code># systemctl enable dhcpcd</code>   开机自动启动dhcp服务<br>如果上述命令执行提示错误，执行<code># pacman -S dhcpcd</code><br>b***.***无线连接<br><code># pacman -S iw wpa_supplicant dialog</code></p><p><strong>8.按照系统引导</strong>(sda修改为实际安装磁盘)</p><p><em><strong>BIOS+BMR分区方案引导系统启动</strong></em>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">pacman -S grub</span>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-install --target=i386-pc /dev/sda</span>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><p><strong>UEFI+<em>GPT分区方案引导系统启动</em></strong>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">pacman -S grub efibootmgr</span>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-install --target=x86_64-efi /dev/sda</span>    <br><span class="hljs-meta prompt_"># </span><span class="language-bash">grub-mkconfig -o /boot/grub/grub.cfg</span><br></code></pre></td></tr></table></figure><p><strong>五、重启</strong></p><p>输入 <code>exit</code> 或按 <code>Ctrl+d</code> 退出 chroot 环境。<br>可选用 <code>umount -R /mnt</code> 手动卸载被挂载的分区：这有助于发现任何「繁忙」的分区，并通过 <a href="https://jlk.fjfi.cvut.cz/arch/manpages/man/fuser.1">fuser(1)</a> 查找原因。<br>最后，通过执行 <code>reboot</code> 重启系统，<em>systemd</em> 将自动卸载仍然挂载的任何分区。不要忘记移除安装介质，然后使用 root 帐户登录到新系统。</p><p><strong>注意</strong>：本文章基于Arch Wiki修改，<a href="https://wiki.archlinux.org/title/Installation_guide">原文链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>系统安装</tag>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KMS命令激活Windows/Office</title>
    <link href="/2023/09/26/active-office/"/>
    <url>/2023/09/26/active-office/</url>
    
    <content type="html"><![CDATA[<p><strong>注意</strong>：以下所有命令均以管理员权限运行</p><p><strong>Windows激活</strong></p><p>1.安装秘钥<br><code>slmgr.vbs -ipk xxxx-xxxx-xxxx-xxxx</code></p><p>2.设置KMS服务器<br><code>slmgr.vbs -skms xxx.xxx.xxx</code></p><p>3.激活Windows<br><code>slmgr.vbs -ato</code></p><p>4.查看激活信息<br><code>slmgr.vbs -xpr</code></p><p><strong>Office激活</strong>(VL版本)</p><p><strong>1.CMD切换到Office安装位置</strong><br>默认安装位置 C:\Program Files\Microsoft Office\Office14<br>office16是office2016<br>office15是office2013<br>office14是office2010<br><code>cd &quot;C:\Program Files\Microsoft Office\Office14&quot;</code></p><p><strong>2.设置KMS服务器</strong><br><code>cscript ospp.vbs /sethst:xxx.xxx.xxx</code></p><p><strong>3.安装Office秘钥</strong><br><code>cscript ospp.vbs /inpkey:xxxxx</code></p><p><strong>4.激活Office</strong><br><code>cscript ospp.vbs /act</code></p><p><strong>可能会用到的ospp.vbs其它命令</strong></p><p><strong>1.卸载秘钥</strong>(xxxxx为秘钥后5位)<br><code>cscript ospp.vbs /unpkey:xxxxx</code><br><strong>2.显示许可证信息</strong><br><code>cscript ospp.vbs /dstatus</code></p>]]></content>
    
    
    <categories>
      
      <category>Windows</category>
      
      <category>Office</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Windows</tag>
      
      <tag>Office</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Let’s Encrypt配置HTTPS</title>
    <link href="/2023/09/26/setting-https/"/>
    <url>/2023/09/26/setting-https/</url>
    
    <content type="html"><![CDATA[<p>注意：教程使用Ubuntu18.04+Nginx</p><p><strong>一、安装Certbot</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs smali">$ sudo<span class="hljs-built_in"> add-apt-repository </span>ppa:certbot/certbot<br>$ sudo apt-get update<br>$ sudo apt-get install certbot  python-certbot-nginx<br></code></pre></td></tr></table></figure><p>如果在执行上述命令时提示命令不存在，可能是没有安装add-apt-repository，请按以下命令安装</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$ sudo apt-<span class="hljs-built_in">get</span> install python-software-<span class="hljs-built_in">properties</span> software-<span class="hljs-built_in">properties</span>-common <br></code></pre></td></tr></table></figure><p><strong>二、生成证书</strong></p><p>执行以下命令，然后按照提示一步一步操作</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">$ sudo certbot <span class="hljs-comment">--nginx</span><br></code></pre></td></tr></table></figure><p><strong>备注：</strong><br>privkey.pem 这是私匙，对应Nginx的ssl_certificate_key选项。<br>cert.pem 服务器证书，对应SSLCertificateFile选项。<br>chain.pem 除服务器证书之外的所有证书，Nginx对应ssl_trusted_certificate选项。<br>fullchain.pem 包括上面的服务器证书和其他证书，Nginx对应ssl_certificate选项。</p><p><strong>三、更新证书</strong></p><p>Let’s Encrypt的证书权威且安全，就是有效期只有90天。过期前需要续时间。运行命令<code>sudo certbot renew</code>即可续时间，如果还没到过期时间，运行命令也不会有大碍。当然你可以使用命令测试<code>sudo certbot renew --dry-run</code>。可以根据需要自己写一个脚本或者cron定时更新证书。</p><p><strong>四、常见问题及解决方法</strong><br><strong>Q</strong>:ubuntu certbot无法从“urllib3.contrib”导入名称“appengine”;<br><strong>A</strong>:执行命令<code>pip3 uninstall urllib3</code>卸载urllib3即可。</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>先生，千古</title>
    <link href="/2021/05/22/xsqg/"/>
    <url>/2021/05/22/xsqg/</url>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;一身黑袍的死神提着镰刀摸进了病房内，穿过焦虑不安忙前忙后的医护人员，走到病床前，看了眼床上的老人，又看了眼手上的名单，点了点头，“是时候了。”它说着，架起了镰刀。<br>&emsp;&emsp;然而，镰刀碎了，凭空出现的两个差役将它一路架出了病房，死死地摁在地上。<br>&emsp;&emsp;牛头声音沙哑，“你不准碰他。”<br>&emsp;&emsp;马面泪眼婆娑，“你不配碰他。”<br>&emsp;&emsp;死神不敢动弹，眼睁睁看着门外的记者将刚发的报道撤回。<br>&emsp;&emsp;“我们真的要这么干吗？”黑无常倚在床边，怅然若失，“我们几十年没见过饿死鬼了，都是老人家的功劳。”<br>&emsp;&emsp;白无常表情凝重，无可奈何，“职责如此。”<br>&emsp;&emsp;半晌，钟馗依然没能下定决心，颤抖的手几乎将生死簿捏皱，将朱砂笔折断。<br>&emsp;&emsp;这时，一只苍老而有力的手搭在了钟馗手上。<br>&emsp;&emsp;“该走了吗？”<br>&emsp;&emsp;“不……不是今天……”<br>&emsp;&emsp;“没事，我是人，我懂。”<br>&emsp;&emsp;老人一脸释然，随即又好似想起了什么，问:“抱歉，可否再等一会呢？”<br>&emsp;&emsp;白无常刚想说什么，却被黑无常一把摁住，“可以可以可以，多久都行！”<br>&emsp;&emsp;“不会太久，不会太久……”老人欣慰的笑了，恍惚间他看见了一间间餐馆，一户户百姓，坐在桌前大快朵颐。<br>&emsp;&emsp;片刻后，人们放下了碗筷，眼前的景象也逐渐模糊。<br>&emsp;&emsp;“他们，吃得可好？”老人还有些担忧。<br>&emsp;&emsp;“不能更好。”钟馗泣不成声。<br>&emsp;&emsp;“不，会更好的。”老人笑了，他缓缓站起身，从苍老的身躯中坐起，向病房内哭成泪人的医生护士们，挥了挥已经触摸不到任何事物的手，眼里泛起些许光亮，“待会，记得要吃饭呀”<br>&emsp;&emsp;……<br>&emsp;&emsp;……<br>&emsp;&emsp;……<br>&emsp;&emsp;医院外<br>&emsp;&emsp;一位白色的西方老人仍在纠缠，“我的朋友，你就不能看在我的面子上……”<br>&emsp;&emsp;“他生于华夏。”龙袍加身的帝王用不容置疑的声音反驳。<br>&emsp;&emsp;“噢，可你知道，天堂是个非常好的地方，纯净且美好，只有那里才适合他。”<br>&emsp;&emsp;“他生于华夏。”帝王重复了一遍，随即从袖中取出一袋种子，“这是他一生的心血，倘若你那地域真有如你所述那般美好，定不会再有饥饿。”<br>&emsp;&emsp;白色老者若有所思，终于还算是心满意足的离开了。<br>&emsp;&emsp;目送完白色老者，帝王缓缓转过身，朝着病房的方向郑重的深深鞠了一躬。<br>&emsp;&emsp;“先生，千古。”</p><p>&emsp;&emsp;–B站网友</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
